<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>「python」- 函数</title>
    <url>/ckcha0umi0000w8tvgos06j0w/</url>
    <content><![CDATA[<h1 id="python之函数"><a href="#python之函数" class="headerlink" title="python之函数"></a>python之函数</h1><blockquote>
<p>什么是函数？函数是一段可常用的代码，为了日后可以经常性的去调用。python自身有很多内置函数，比如说input,print,我们也可以自己去定义函数</p>
</blockquote>
<h2 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h2><blockquote>
<p>python中，<code>def</code>关键字用来声明函数<br>下面一步步来认识创建函数<br>首先函数的格式是：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(参数<span class="number">1</span>，参数<span class="number">2.</span>....参数n)</span>:</span></span><br><span class="line">    函数中的语句</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nothing</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#我创建了一个叫nothing的函数，nothing()中我没有设置参数，语句是一个pass，pass并不是只能用于函数中，if中用pass也可以，相当于空。按照中文意思来说就是我过了，给系统表达你不用理我，但我是合法的意思，而实际操作意义是，我只是想用一个pass来暂时创建这个函数的基本骨架，让系统先不要报错，回过头来我再完善语句</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">average_pn</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    result = (a + b)/<span class="number">2</span></span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">average_pn(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line"><span class="comment">#结果是3</span></span><br><span class="line"><span class="comment">#这里我定义了一个叫average_pn求正数平均数的函数，我还设置了两个参数，这两个参数是抽象意义来说的，那么我这个函数的算法是两个数相加除以2，最后打印出来。调用average_pn()函数后，写入具体数据实现函数的功能</span></span><br></pre></td></tr></table></figure>
<p>上面的这个函数中，结果直接打印出来，但是在实际意义上来讲，我们希望他是返回一个值，然后我们给返回的值进行变量的赋值，继续完成我们程序下面的操作，所以说直接<code>print</code>实际操纵意义不大，更应该是返回一个值，而对于返回值下面又会继续用代码来说明。</p>
<h2 id="返回值return"><a href="#返回值return" class="headerlink" title="返回值return"></a>返回值return</h2><blockquote>
<p>用于将函数的结果返回出来</p>
</blockquote>
<ul>
<li>函数可以没有返回值，那么其实就相当于返回了 None</li>
<li>当return执行时，函数会不留情面的立刻结束<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">average_pn</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> a == b:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">elif</span>  a&lt;<span class="number">0</span> <span class="keyword">or</span> b&lt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result = (a+b)/<span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">avg = int(average_pn(<span class="number">1</span>,<span class="number">13</span>))</span><br><span class="line">print(avg)        <span class="comment">#结果是7</span></span><br><span class="line"><span class="comment">#ps :这里解释一下为什么我要int转换类型，因为在python3中/除出来就算是整数也是会个小数</span></span><br><span class="line"><span class="comment">#详情看看这个网址 https://blog.csdn.net/weixin_40485502/article/details/82832450</span></span><br><span class="line"><span class="comment">#这里我定义了一个只能求正数平均数的函数 average(a,b),并设置了两个参数。当判断a等于b的时候，就不需要进行计算，返回a即可；当发现a小于0或b小于0的时候，即不合法的输入的时候，直接返回None，其他则是有效结果进行相加求平均数。</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>有三种情况会返回None :没有return（就是没写return），return为空(就是只写return)，第三种就是return None</p>
</blockquote>
</li>
</ul>
<h2 id="全局变量和局部变量"><a href="#全局变量和局部变量" class="headerlink" title="全局变量和局部变量"></a>全局变量和局部变量</h2><blockquote>
<p><strong>全局变量</strong>：函数外面的变量，在任何地方都可以访问的变量<br><strong>局部变量</strong>：函数里面的变量，只能放在函数内部使用</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">12</span>                             <span class="comment">#全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    b = <span class="number">5</span>                          <span class="comment">#局部变量</span></span><br><span class="line"></span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line"></span><br><span class="line">show()     </span><br><span class="line"><span class="comment">#结果是：</span></span><br><span class="line"><span class="comment"># 12</span></span><br><span class="line"><span class="comment"># 5------调用了上面函数的时候，函数里面定义b，打印b，并且打印了全局变量a</span></span><br><span class="line">print(a)   <span class="comment">#12        直接打印全局变量a</span></span><br><span class="line">print(b)   <span class="comment"># 这里会报错，可以理解为在主函数中用不了你这个局部变量，会提示b未定义</span></span><br><span class="line"><span class="comment"># 可以这么通俗的理解，a就是公共卫生间，b是你家里的卫生间，如果有个你不认识的人去用你家里的卫生间，你肯定也会报警；但是你家里的人去公共卫生间那么不会报警。</span></span><br></pre></td></tr></table></figure>
<h2 id="同名变量的遮蔽"><a href="#同名变量的遮蔽" class="headerlink" title="同名变量的遮蔽"></a>同名变量的遮蔽</h2><blockquote>
<p>当全局变量和局部变量同名时，会优先使用局部变量–有人管这叫<code>就近原则</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">12</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">5</span></span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line">show()   <span class="comment">#结果是5</span></span><br><span class="line">print(a)  <span class="comment">#结果是12</span></span><br><span class="line"><span class="comment">#这里调用函数的时候，函数中print(a),这个a是优先使用局部变量的a</span></span><br><span class="line"><span class="comment">#这里有个很重要的点，不要理解为函数中a = 5是为全局变量赋值为5了，因为下面那一句print(a)结果还是12，只是函数中就近原则使用了局部变量，换句话来说就是在本地产生了一个新的a，上面全局变量我没动你(这也是python不用声明的一个小"bug"吧</span></span><br></pre></td></tr></table></figure>
<p>如果你真想对全局变量赋值，而不是产生一个新的a，可以用global关键字，下面看代码演示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">12</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> a </span><br><span class="line">    <span class="comment">#不希望遮蔽，而是修改全局变量，你要声明一下，告诉系统我想改变的是全局变量a，而并不是产生一个新的a</span></span><br><span class="line">    a = <span class="number">5</span></span><br><span class="line">    print(a)</span><br><span class="line">    print(id(a)) <span class="comment">##这里打印此时a的id</span></span><br><span class="line"></span><br><span class="line">show()</span><br><span class="line">print(a)</span><br><span class="line">print(id(a)) <span class="comment">##这里打印此时a的id</span></span><br><span class="line"><span class="comment">## 结果是两个都是5，两个都是一样的id，证明只是修改了全局变量，并不是产生了一个新的a，这两个a是一样的</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#当然你也可以通过global关键字在函数里面创造全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    a = <span class="number">5</span></span><br><span class="line">    </span><br><span class="line">print(a)</span><br><span class="line"><span class="comment">#结果是5，这里直接上函数，在函数里面定义了一个全局变量a，告诉系统我创建的就是一个全局变量a，那么最后自然也能打印出来</span></span><br></pre></td></tr></table></figure>

<h3 id="总结：global关键字是对全局变量的一种保护。"><a href="#总结：global关键字是对全局变量的一种保护。" class="headerlink" title="总结：global关键字是对全局变量的一种保护。"></a>总结：global关键字是对全局变量的一种保护。</h3><blockquote>
<p>其实写程序要尽可能少的去使用全局变量，不然会容易起冲突，会容易互相污染，而<code>global</code>存在的意义则是要保护这么个全局变量，防止有人不知道他所定义的这个变量是全局变量从而去修改了他。当你用<code>global</code>关键字的时候就是提醒系统我知道我在操作全局变量这件事，你不用管我，我知道我自己在干什么</p>
<blockquote>
<p>再啰嗦一句，精辟一句，<code>global</code>的实际存在意义是为了在多人协作项目中防止”天下大乱”。</p>
</blockquote>
</blockquote>
<hr>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><blockquote>
<p>参数用于向函数内部传递数据</p>
</blockquote>
<h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(a,b = <span class="number">100</span>)</span>:</span></span><br><span class="line">    print(a,b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show(<span class="number">1</span>,<span class="number">5</span>)   <span class="comment">#1,5</span></span><br><span class="line">show(<span class="number">1</span>)     <span class="comment">#1,100</span></span><br><span class="line">show()      <span class="comment">#报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这里我创建了一个叫show()的函数，设置了两个参数：a，b。</span></span><br><span class="line"><span class="comment"># a的值没有给出默认由操作者写入数据，b的值给出了默认等于100。什么意思呢？当使用这个函数的时候：</span></span><br><span class="line">    <span class="number">1.</span>a的值你一定要给我，b的值你可以不给我</span><br><span class="line">    <span class="number">2.</span>b的值你不给我，我就用我默认的值<span class="number">100</span>执行 <span class="keyword">print</span></span><br><span class="line"></span><br><span class="line">也就是说你去这个show餐厅点餐，要求点两个菜，有一个菜a你是必须要自己点的，菜b我可以帮你点，你不点我就帮点了这个，当然你也可以自己点，我会优先遵从你的点法。</span><br></pre></td></tr></table></figure>
<p><strong><div align = center>默认参数虽然好，可是也要注意一下 以下的事情</div></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(a=<span class="number">10</span>,b)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(a,b)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">show</span><span class="params">(<span class="number">12</span>)</span>     </span></span><br><span class="line"><span class="function">#这里我像上面那样设置了一个函数两个参数，但不同的是，我设置的是<span class="title">a</span>的默认值，此时我只想传一个参数，因为<span class="title">a</span>默认了嘛，我以为他能传一个参数就能传给<span class="title">b</span>，但是报错了。</span></span><br><span class="line"><span class="function">#报错：<span class="title">non</span>-<span class="title">default</span> <span class="title">argument</span> <span class="title">follows</span> <span class="title">default</span> <span class="title">argument</span></span></span><br><span class="line"><span class="function">？为什么</span></span><br><span class="line"><span class="function"># 这里注意一点，注意<span class="title">a</span>的位置，<span class="title">a</span>是在<span class="title">b</span>的前面的，<span class="title">a</span>设置了默认值，虽然设置了默认值，可是当我传一个参数的时候，系统就会摸棱两可，自我挣扎，你这是传给<span class="title">a</span>，还是传给<span class="title">b</span>呢，我知道你可能想传给<span class="title">b</span>，可是<span class="title">a</span>在<span class="title">b</span>的前面，你这样传我很难做。然后就报错了</span></span><br></pre></td></tr></table></figure>
<p>👆👆👆👆👆</p>
<blockquote>
<p>上面这份程序说明如果你有一个参数是可选的（也就是默认的），那么他后面的参数也必须是可选的（必须是默认的），如果不是就会报错</p>
</blockquote>
<hr>
<h3 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h3><blockquote>
<p>python中提供了两种传参的方式：<strong>位置参数</strong>(positional arguments)和<strong>关键字参数</strong>(keyword arguments)</p>
<ul>
<li>位置参数：最普遍的传参方式，与绝大部分语言的参数类似，以先后顺序为准则</li>
<li>关键字参数：较为少见的传参方式，与某些语言的命名参数或<code>hash</code>参数类似，用参数的名称直接访问</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(a,b,c)</span>:</span></span><br><span class="line">    print(a,b,c)</span><br><span class="line"></span><br><span class="line"><span class="comment">#位置参数---最普通的参数</span></span><br><span class="line">show(<span class="number">12</span>,<span class="number">2</span>,<span class="number">6</span>)   ----<span class="number">-12</span>，<span class="number">2</span>，<span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#关键字参数---用名字访问</span></span><br><span class="line">show(a=<span class="number">12</span>,b=<span class="number">5</span>,c=<span class="number">8</span>) ----<span class="number">-12</span>,<span class="number">5</span>,<span class="number">8</span></span><br><span class="line">show(b=<span class="number">12</span>,a=<span class="number">5</span>,c=<span class="number">8</span>) ----<span class="number">-5</span>,<span class="number">12</span>,<span class="number">8</span></span><br><span class="line">show(c=<span class="number">12</span>,b=<span class="number">5</span>,a=<span class="number">8</span>) ----<span class="number">-8</span>,<span class="number">5</span>,<span class="number">12</span></span><br><span class="line"><span class="comment">#由上面这三行可看出，当你用关键字参数传值的时候，顺序已经不再重要了，因为你已经指定了谁是多少，顺序已经不是条件。</span></span><br></pre></td></tr></table></figure>
<h3 id="混合使用位置参数和关键字参数"><a href="#混合使用位置参数和关键字参数" class="headerlink" title="混合使用位置参数和关键字参数"></a>混合使用位置参数和关键字参数</h3><p>划重点，你可以这么用但是！<br><strong>关键字参数必须在所有位置参数的后面</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(a,b,c)</span>:</span></span><br><span class="line">    print(a,b,c)</span><br><span class="line"></span><br><span class="line">show(<span class="number">12</span>,<span class="number">5</span>,c = <span class="number">8</span>)        ---<span class="number">-12</span>,<span class="number">5</span>,<span class="number">8</span></span><br><span class="line">show(<span class="number">12</span>,c = <span class="number">8</span>,b = <span class="number">5</span>)    ---<span class="number">-12</span>,<span class="number">5</span>,<span class="number">8</span></span><br><span class="line"><span class="comment">## 先来看看上面这两行代码</span></span><br><span class="line">    <span class="number">1.</span>要么你就按顺序来，然后最后指定c = 多少</span><br><span class="line">    <span class="number">2.</span>要么也是同样性质，按顺序来，然后指定b是多少，c是多少</span><br><span class="line"></span><br><span class="line">show(<span class="number">12</span>,<span class="number">5</span>,b=<span class="number">8</span>)</span><br><span class="line">show(<span class="number">12</span>,b=<span class="number">8</span>,<span class="number">5</span>)</span><br><span class="line"><span class="comment">##两行代码也会报错</span></span><br><span class="line">    1.报错：TypeError: show() got multiple values for argument 'b'--&gt;b重复赋值了</span><br><span class="line">    你这样写你代表前面按顺序来了分别指定a = <span class="number">12</span>，b=<span class="number">5</span>，最后竟然又指定b=<span class="number">8</span>，不行 (×)</span><br><span class="line">    <span class="number">2.</span>至于第二行代码为什么会报错 我们来看看报错的语句</span><br><span class="line">     SyntaxError: positional argument follows keyword argument</span><br><span class="line">     字面上来说就是你的这个位置参数不能跟在关键字参数后面</span><br><span class="line">     所以你如果要混合使用位置参数和关键字参数，可以，但是关键字参数必须在所有位置参数的后面</span><br><span class="line">     ！！！！注意这个所有</span><br></pre></td></tr></table></figure>

<h2 id="在函数中返回多个值"><a href="#在函数中返回多个值" class="headerlink" title="在函数中返回多个值"></a>在函数中返回多个值</h2><blockquote>
<p>在python中，函数同时return多个结果，只需要用<code>,</code>(逗号)隔开就行，多个参数会以元组的形式返回</p>
<blockquote>
<p>ps:在其他语言当中，一般情况下，函数返回只能返回一个值</p>
</blockquote>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">12</span>,<span class="number">5</span></span><br><span class="line">s = show()</span><br><span class="line">print(s)</span><br><span class="line"><span class="comment">#结果为  (12,5)   -----这是一个元组(tuple)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#你也可以用结构赋值一起使用</span></span><br><span class="line">(a,b) = show()</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line"><span class="comment">#结果为 12</span></span><br><span class="line">        <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#你也可以 手动用tuple或者其他方式返回</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">12</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">(a,b) = show()</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line"><span class="comment">#结果是 12</span></span><br><span class="line">        <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#列表 (list)形式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="number">12</span>,<span class="number">5</span>]</span><br><span class="line"> [a,b] = show()</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line"> <span class="comment">#结果是 12</span></span><br><span class="line">         <span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>小总结：其实python他返回的值也只能是一个，只不过他语言自身为我们包装成了<code>tuple</code>形式，让我们可以返回多个值</p>
<hr>
<h1 id="大总结"><a href="#大总结" class="headerlink" title="大总结"></a>大总结</h1><ol>
<li><code>def</code>关键字创建函数，<code>pass</code>关键字为了搭建大的架构</li>
<li>函数可以没有返回值，相当于返回None，当函数中return执行时，函数会立即结束；在任何地方都可以使用return，在if中等等等</li>
<li>尽量减少全局变量的使用,<code>global</code>关键字存在是为了保护全局变量</li>
<li>传参数的时候，用两种方式传参的时候，要注意<strong>关键字参数必须在所有位置参数的后面</strong>，注意这个<strong>所有</strong></li>
<li>函数返回多个值的技巧其实就是返回了一个<code>tuple(元组)</code></li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>函数</tag>
        <tag>python 基础</tag>
      </tags>
  </entry>
  <entry>
    <title>「python」- 列表</title>
    <url>/ckcha0umr0001w8tv4sgu90go/</url>
    <content><![CDATA[<p>#python 学习笔记之列表<br>#列表跟字符串很像，只不过存的不是字符，可以是任何东西（甚至是另一个list）<br>—-list 非常类似于array</p>
<p>#创建列表<br>    方法1:直接写<br>    l（这不是1，字母l） = [1,2,3,4]</p>
<pre><code>方法2：构造器
l = list([1,2,3,4])

也可以通过其他序列构造列表
l = list(&apos;abcd&apos;)  #l = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;]-----把字符串转成列表</code></pre><p>#访问列表元素<br>—和访问字符串元素一样<br>    l = [1,2,3,4,5,6]<br>    print(l[0])   #1<br>    print(l[3:5])  #3456</p>
<p>#序列通用操作<br>字符串和list都是序列，所以会有很多操作可以通用（当然，也有不可通用的部分）<br>3 in [1,2,3]  #判断是否存在<br>3 not in [5,6,7]<br>[1,2,3]+[4,5,6] #连接<br>[1,2,3]*3       #重复<br>l[0]            #索引<br>len(l)          #长度<br>    s = ‘asdfasdf’<br>    l = [1,2,3,4]</p>
<pre><code>print(len(s))  #8
print(len(l))  #4</code></pre><p>l(start:end)    #截取</p>
<p>for             #循环<br>        l = [12,5,8,99]</p>
<pre><code>    for item in l:
        print(item)
#输出： 12
        5
        8
        99</code></pre><p>max和min        #最大和最小值</p>
<pre><code>l = [12,8,99,27]
print(min(l))

#输出：8</code></pre><p>sum(l)          #求和，str不可用<br>    l = [12,8,99,27,17]<br>    print(sum[l])</p>
<pre><code>#输出：163

s = &apos;jlkjdkl&apos;
print(sum(s))

#出错   字符串虽然是一个序列。因为每一元素是一个字，也是一个字符串，相加是不行的，本质上相加是数字去相加


#比较运算

l1 = [12,5,9]
l2 = [8,99,99]

print(l1&gt;l2)
#True


#list 专有操作</code></pre><p>   append(x)  末尾添加<br>        l = [1,2,3]<br>        l.append(5) #l = [1,2,3,5]</p>
<p>   insert(index,x)   插入<br>        l = insert(0,5)  #l = [5,1,2,3]—-在第0位插入5</p>
<p>   pop(i) 删除，默认不带参数是删除最后一个<br>        l.pop()     #l = [1,2]<br>        l.pop(0)    #l = [2,3]—-带参数用，pop第几个–&gt;删除第几个</p>
<p>   remove(x)   删除，与pop的区别是，remove要你删除的是什么，不是第几个<br>        l.remove(1)  #l = [2,3]—-我要删除1，不是位置就是删除里面的内容</p>
<p>   count(x)   计数<br>        l = [12,5,8,8,8,12,5]<br>        print(l.count(12)) —-#2   有多少个2<br>        print(l.count(8))——#3   有多少个8</p>
<p>   index(x)  查找<br>        l = [12,5,8,8,8,12,5]<br>        print(l.index(8)) –#2  —-8第一次出现是在第2位<br>        print(l.index(99))–#出错—99没有出现在列表里面      </p>
<p>   reverse()  反转<br>        l = [1,2,3,4]<br>        l.reverse()<br>        print(l)  #—-l = [4,3,2,1]</p>
<pre><code>ps:不能直接print(l.reverse())---这样会返回none，因为reverse()不是直接返回值，是修改了值，所以要再次打印</code></pre><p>   sort()   排序<br>        l = [12,88,9,27,6]<br>        l.sort()<br>        print(l) —# l = [6,9,12,27,88]–默认从小到达排序<br>        #同理不能直接print(l.sort())</p>
<p>#推倒式<br>推倒式是python非常有特色的一个表达式，其他语言几乎没有<br>(本质上)·从一个序列生成另一个序列<br>·跟循环很像<br>·语法：[结果 for x in 序列if 条件]<br>        l = [1,2,3,4]<br>       #目标变成—&gt; l2 = [6,7,8,9]</p>
<pre><code>l2 = [item+5 for item in l]
print(l)
print(l2)
输出；[1,2,3,4]
      [6,7,8,9]
    ps:l2 = [1 for item in  l]
        输出：[1,1,1,1]----没有强制规定item一定要用
    甚至全部变成&apos;abc&apos; l2 = [&apos;abc&apos; for item in l]

l1 = [1,2,3,4,5,6,7,8,9]
l2 = [item*2 for item in l1 if item%3==0]
print(l2)
---输出:[6,12,18]
---将原本数列*2 之后得到的数列 能被3整除的

------推倒式非常适合用来“导出”某个数据，比如：从一组xpath中导出标题</code></pre>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python 基础</tag>
        <tag>列表</tag>
        <tag>list</tag>
      </tags>
  </entry>
  <entry>
    <title>「python」- 数据类型和变量</title>
    <url>/ckcha0umx0004w8tvbcrtgwna/</url>
    <content><![CDATA[<h1 id="python入门-数据类型和变量"><a href="#python入门-数据类型和变量" class="headerlink" title="python入门-数据类型和变量"></a>python入门-数据类型和变量</h1><blockquote>
<p>什么是变量？变量是用来存东西的。</p>
</blockquote>
<p>就像一个杯子用来装水，<strong>但是python里面存的不是水，<br>而存的是在哪能找到这个水</strong>，存的是引用，即变量用于引用内存中存储的对象</p>
<h2 id="python中的一切都是“对象”（Object）"><a href="#python中的一切都是“对象”（Object）" class="headerlink" title="python中的一切都是“对象”（Object）"></a>python中的一切都是“对象”（Object）</h2><blockquote>
<p>基本类型也是对象</p>
</blockquote>
<h3 id="python是动态类型的：一个变量的类型可以变，可以存数字，过一会可以存字符串"><a href="#python是动态类型的：一个变量的类型可以变，可以存数字，过一会可以存字符串" class="headerlink" title="python是动态类型的：一个变量的类型可以变，可以存数字，过一会可以存字符串"></a>python是<strong>动态类型</strong>的：<strong>一个变量的类型可以变，可以存数字，过一会可以存字符串</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">12</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">a = <span class="string">'abc'</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">输出：<span class="number">12</span></span><br><span class="line">	  abc</span><br></pre></td></tr></table></figure>

<h3 id="python的变量无需声明，在第一次赋值的时候产生"><a href="#python的变量无需声明，在第一次赋值的时候产生" class="headerlink" title="python的变量无需声明，在第一次赋值的时候产生"></a>python的变量<strong>无需声明</strong>，在第一次赋值的时候产生</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//java中：</span></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">a = <span class="number">12</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#python中：</span></span><br><span class="line">a = <span class="number">12</span>   <span class="comment"># 即可</span></span><br></pre></td></tr></table></figure>

<h3 id="python是强类型的：不能随便把一个数字和字符串放到一块去"><a href="#python是强类型的：不能随便把一个数字和字符串放到一块去" class="headerlink" title="python是强类型的：不能随便把一个数字和字符串放到一块去"></a>python是<strong>强类型</strong>的：<strong>不能随便把一个数字和字符串放到一块去</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#连等</span></span><br><span class="line"> a = b = c = <span class="number">12</span></span><br><span class="line"><span class="comment">#等价于</span></span><br><span class="line">a = <span class="number">12</span></span><br><span class="line">b = <span class="number">12</span></span><br><span class="line">c = <span class="number">12</span></span><br><span class="line">	 </span><br><span class="line"><span class="comment">#再次说明：在python中，a并不保存值本身，而是引用这个值</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>ps:其他语言比如c语言，你让他保存12到一个变量a里面，这个变量里面是真的存了这个12的值</p>
</blockquote>
<hr>
<h3 id="解构赋值（联合赋值）"><a href="#解构赋值（联合赋值）" class="headerlink" title="解构赋值（联合赋值）"></a>解构赋值（联合赋值）</h3><p><code>a,b,c = 12,5,8</code>—&gt;说白了，就是可以同时给很多个变量赋值<br>可以做一些好玩的事情</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">12</span></span><br><span class="line">b = <span class="number">5</span></span><br><span class="line">print(a,b)</span><br><span class="line"></span><br><span class="line">b,a = a,b</span><br><span class="line">print(a,b)</span><br><span class="line"></span><br><span class="line">输出：<span class="number">12</span> <span class="number">5</span></span><br><span class="line">	  <span class="number">5</span> <span class="number">12</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="python基本数据类型"><a href="#python基本数据类型" class="headerlink" title="python基本数据类型"></a>python基本数据类型</h2><table>
<thead>
<tr>
<th>数据类型</th>
<th>表示</th>
</tr>
</thead>
<tbody><tr>
<td><strong>数字</strong></td>
<td>int，float</td>
</tr>
<tr>
<td><strong>字符串</strong></td>
<td>str</td>
</tr>
<tr>
<td><strong>列表</strong></td>
<td>list</td>
</tr>
<tr>
<td><strong>元组</strong></td>
<td>tuple</td>
</tr>
<tr>
<td><strong>字典</strong></td>
<td>dict</td>
</tr>
<tr>
<td><strong>布尔值</strong></td>
<td>bool</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#接收用户输入</span></span><br><span class="line">（python是强类型的）</span><br><span class="line"></span><br><span class="line">name = input(<span class="string">'请输入你的名字：'</span>)</span><br><span class="line">print(<span class="string">'你好'</span>，+name)</span><br><span class="line"></span><br><span class="line">输出：请输入你的名字：张三（这个张三是用户输入进去的）</span><br><span class="line">      你好，张三</span><br><span class="line">	  </span><br><span class="line"><span class="comment">#ps：</span></span><br><span class="line">age = input(<span class="string">'你今年几岁'</span>)</span><br><span class="line">year = <span class="number">2018</span>-int(age)   </span><br><span class="line"><span class="comment">#加int转换类型是因为input所输入进来的一切都是字符串，所以要转换为int</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'你是'</span>+str(year)+<span class="string">'出生的'</span>)</span><br><span class="line"><span class="comment">#加str是因为year被上面转换成数字，这里'你是'是字符串，所以需要再转换</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python 基础</tag>
        <tag>数据类型</tag>
        <tag>变量</tag>
      </tags>
  </entry>
  <entry>
    <title>「python」- 字典</title>
    <url>/ckcha0un00005w8tv656o7szt/</url>
    <content><![CDATA[<h1 id="python学习笔记之字典"><a href="#python学习笔记之字典" class="headerlink" title="python学习笔记之字典"></a>python学习笔记之字典</h1><blockquote>
<ul>
<li>要唯一，最好是数字</li>
<li>字典的作用：找东西啊！！！key很关键，要定好</li>
<li>字典用于存储“键值对”，用于快速获取、添加、删除、修改某个值，类似于PHP的联合数组、Java的HashMap、JS的json</li>
<li>And:用户名-&gt;用户资料 等等   <blockquote>
<p>所有语言中的字典，都是基于Hash、二叉树或其他类似结构的一类无序数据结构，目的就是为了增加数据访问的速度</p>
</blockquote>
</li>
</ul>
</blockquote>
<h2 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h2><p>在Python中，有<strong>两种方式创建字典</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方法1：直接写</span></span><br><span class="line">    d = &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"张三"</span>,</span><br><span class="line">        <span class="string">"age"</span> : <span class="number">35</span>,</span><br><span class="line">        <span class="string">"gender"</span>: <span class="string">"男"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    print(d[<span class="string">'gender'</span>])  <span class="comment">#男</span></span><br><span class="line">    print(d[<span class="string">'age'</span>])  <span class="comment">#35</span></span><br><span class="line">·</span><br><span class="line"><span class="comment">#方法2：构造器   d2 = dict([</span></span><br><span class="line">        [<span class="string">'name'</span>,<span class="string">'张三'</span>],</span><br><span class="line">        [<span class="string">'age'</span>,<span class="number">35</span>],</span><br><span class="line">        [<span class="string">'gender'</span>,<span class="string">'男'</span>]</span><br><span class="line">    ])</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="字典的增删改查"><a href="#字典的增删改查" class="headerlink" title="字典的增删改查"></a>字典的增删改查</h2><blockquote>
<p>直接扔就行</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"张三"</span>,</span><br><span class="line">        <span class="string">"age"</span> : <span class="number">35</span>,</span><br><span class="line">         <span class="string">"gender"</span>: <span class="string">"男"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">d[<span class="string">'height'</span>] = <span class="number">185</span>---增加身高为<span class="number">185</span></span><br><span class="line"><span class="keyword">del</span> d[<span class="string">'gender'</span>]---删除性别</span><br><span class="line">d[<span class="string">'age'</span>] -= <span class="number">5</span>---修改岁数减少<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#循环</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> d:</span><br><span class="line">    print(item)</span><br><span class="line">    <span class="comment">#输出：  name </span></span><br><span class="line">            age</span><br><span class="line">            gender</span><br><span class="line">            <span class="comment">#!!!!循环的是key，不是value</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#要全部输出（key和value），可以进行序列的拼接</span></span><br><span class="line">print(key + <span class="string">":"</span> + str(d[key]))-----<span class="number">-35</span>是数字，要转换为字符串</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="长度："><a href="#长度：" class="headerlink" title="长度："></a>长度：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"张三"</span>,</span><br><span class="line">        <span class="string">"age"</span> : <span class="number">35</span>,</span><br><span class="line">        <span class="string">"gender"</span>: <span class="string">"男"</span></span><br><span class="line">    &#125;</span><br><span class="line">print(len(d))</span><br><span class="line"><span class="comment">#输出  3-----可以理解为3个东西，3个键值对</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="是否相等"><a href="#是否相等" class="headerlink" title="是否相等"></a>是否相等</h3><blockquote>
<ul>
<li>顺序对字典毫无意义  </li>
<li>比较的是key，以及key后面的value是否相同</li>
</ul>
</blockquote>
<hr>
<h3 id="in操作"><a href="#in操作" class="headerlink" title="in操作"></a>in操作</h3><blockquote>
<p>dict 的in 操作,<strong>检测的是key不是value</strong></p>
</blockquote>
<h2 id="字典的方法"><a href="#字典的方法" class="headerlink" title="字典的方法"></a>字典的方法</h2><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>clear()</td>
<td>清空字典</td>
</tr>
<tr>
<td>keys()</td>
<td>返回所有key</td>
</tr>
<tr>
<td>values()</td>
<td>返回所有value</td>
</tr>
<tr>
<td>get(key)</td>
<td>索引，类似于[]</td>
</tr>
<tr>
<td>pop(key)</td>
<td>删除，类似于上面的del</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python 基础</tag>
        <tag>字典</tag>
      </tags>
  </entry>
  <entry>
    <title>「python」- 流程控制语句</title>
    <url>/ckcha0un20006w8tvf6nler8g/</url>
    <content><![CDATA[<h1 id="python流程控制语句"><a href="#python流程控制语句" class="headerlink" title="python流程控制语句"></a>python流程控制语句</h1><blockquote>
<p>根据条件不同执行不同的代码是程序非常常见的也是非常重要的行为</p>
</blockquote>
<h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><hr>
<h3 id="先来回顾一下关系运算符"><a href="#先来回顾一下关系运算符" class="headerlink" title="先来回顾一下关系运算符"></a>先来回顾一下关系运算符</h3><table>
<thead>
<tr>
<th>符号</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
</tr>
<tr>
<td>==</td>
<td>相等</td>
</tr>
<tr>
<td>！=</td>
<td>不等</td>
</tr>
</tbody></table>
<blockquote>
<p>关系运算符最终得出的结果返回的就是布尔值(boolean)，而所谓的布尔值也就是<code>False</code>和<code>True</code>两个,比如说</p>
<ul>
<li>print(12&gt;5)                # True</li>
<li>print(5&gt;12)                # False</li>
<li>True 和 False 是python里面的关键字（要么是真的要么是假的）</li>
</ul>
</blockquote>
<p>if 语句就是依靠布尔值来工作的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 布尔值:</span><br><span class="line">    为<span class="literal">True</span>时执行的语句</span><br><span class="line"><span class="keyword">else</span> 布尔值:</span><br><span class="line">    为<span class="literal">False</span>时执行的语句</span><br></pre></td></tr></table></figure>
<p>来看一下关于if的所有内容举例代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hungry = <span class="literal">True</span>              <span class="comment">#当我规定hungry为真的时候</span></span><br><span class="line">money = <span class="number">5</span>                  <span class="comment">#定义我现在只有五块钱</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> hungry:                <span class="comment">#当hungry为真的时候，这里开始运行</span></span><br><span class="line">    <span class="keyword">if</span> money &lt; <span class="number">5</span>:         <span class="comment">#if之后再if，if是可以嵌套的，当hungry为真，且money&lt;5的时候运行</span></span><br><span class="line">        print(<span class="string">'别吃了饿着吧'</span>)</span><br><span class="line">    <span class="keyword">elif</span> money &lt; <span class="number">10</span>:      <span class="comment">#当hungry为真，且money&gt;5 同时小于10的时候运行</span></span><br><span class="line">        print(<span class="string">'吃馒头'</span>)</span><br><span class="line">    <span class="keyword">elif</span> money &lt; <span class="number">20</span>:      <span class="comment">#当hungry为真，且money&gt;10 同时小于20的时候运行</span></span><br><span class="line">        print(<span class="string">'吃面'</span>)</span><br><span class="line">    <span class="keyword">elif</span> money &lt; <span class="number">30</span>:      <span class="comment">#当hungry为真，且money&gt;20 同时小于30的时候运行</span></span><br><span class="line">        print(<span class="string">'吃饭'</span>)</span><br><span class="line"><span class="keyword">else</span>：                    <span class="comment">#这个else 是对齐上面的大的if的，所以这里是hungry为假的时候运行</span></span><br><span class="line">    print(<span class="string">'接着工作'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>if语句是可以嵌套的，python中没有switch</li>
<li>如果hungry为False就会执行下下面的”接着工作”</li>
<li>为什么hungry为False就会执行下面的”接着工作”?if 和 else，所以再次强调python的<u>缩进很重要</u>，如果上面的else 和 最上面的if 缩进格数不一样(通俗来讲就是不对齐的话就会报错),而对于缩进的格数没有严格的规定，只要在你相同逻辑下的语句缩进相同格数就行</li>
<li>python中if是必须的但是else不是必须的比如说<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> hungry == <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">'快去吃饭'</span>)</span><br></pre></td></tr></table></figure>
上面如果hungry不等于True该干嘛干嘛，我可以不用管。  </li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python 基础</tag>
        <tag>流程控制语句</tag>
        <tag>if语句</tag>
      </tags>
  </entry>
  <entry>
    <title>「python」- 元组(tuple)</title>
    <url>/ckcha0wzu0013w8tv22vkb5ca/</url>
    <content><![CDATA[<h1 id="python之–元组-tuple"><a href="#python之–元组-tuple" class="headerlink" title="python之–元组(tuple)"></a>python之–元组(tuple)</h1><blockquote>
<p>元组其实和list几乎一模一样，只是<u>不能修改</u>  </p>
</blockquote>
<h2 id="创建元组"><a href="#创建元组" class="headerlink" title="创建元组"></a>创建元组</h2><ol>
<li>方法1：常用<br> <code>tuple1 = (1,2,3)</code><blockquote>
<p>ps:这里想回忆一下：  </p>
</blockquote>
<ul>
<li>元组是  <code>()</code></li>
<li>列表是  <code>[]</code></li>
<li>字典是 <code>{}</code></li>
</ul>
</li>
<li>方法2：构造器<br>t = tuple((1,2,3))</li>
</ol>
<hr>
<h2 id="元组操作，和list共享所有操作，除了修改的操作！！"><a href="#元组操作，和list共享所有操作，除了修改的操作！！" class="headerlink" title="元组操作，和list共享所有操作，除了修改的操作！！"></a>元组操作，和list共享所有操作，除了修改的操作！！</h2><blockquote>
<p>下面通过代码来说明</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)  <span class="comment">#定义一个元组</span></span><br><span class="line"></span><br><span class="line">print(t)                      <span class="comment">#(1,2,3) √</span></span><br><span class="line">print(t[<span class="number">0</span>])                   <span class="comment">#1 √</span></span><br><span class="line">t[<span class="number">0</span>] = <span class="number">12</span>                     <span class="comment">#报错 ×---！说了不能修改！</span></span><br><span class="line"><span class="keyword">del</span> t[<span class="number">0</span>]                      <span class="comment">#报错 ×---！说了不能修改！</span></span><br><span class="line">t.append(<span class="number">8</span>)                   <span class="comment">#报错 ×---！说了不能修改！</span></span><br><span class="line">t.pop()                       <span class="comment">#报错 ×---！说了不能修改！</span></span><br></pre></td></tr></table></figure>
<p>综上，增删改通通都别想，只能查。</p>
<blockquote>
<p>列举一下查的操作</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> t:</span><br><span class="line">    print(i)</span><br><span class="line">    <span class="comment"># 1</span></span><br><span class="line">      <span class="number">2</span></span><br><span class="line">      <span class="number">3</span></span><br><span class="line">      4 ----&gt;没有增删改，循环输出而已</span><br><span class="line"></span><br><span class="line">其他包括截取索引，<span class="keyword">in</span>和<span class="keyword">not</span> <span class="keyword">in</span> ，min，max，len，sum都可以</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><blockquote>
<ol>
<li><code>元组(tuple)</code>通俗来理解可以为 一个 受到保护的<code>列表(list)</code></li>
<li>元组的意义在哪？比如说 当一些东西长期以来不变的时候就应该用<code>tuple</code>，比如说中国的省份，不是说以后一定不会变化，只是在一定或较长时间内不会发生变化，那么用<code>tuple</code>更加合适。而放在编写项目的时候，在多人协作的一个项目之中，你确定有些部分的内容确实不用改，你可以写成一个<code>tuple</code>,就能防止有人不小心修改了<code>tuple</code>里面的内容，万一将来真的有变化，那就直接从定义那里改，与其说是没意义，还不如说是一个谨慎的列表。</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python 基础</tag>
        <tag>元组</tag>
      </tags>
  </entry>
  <entry>
    <title>「python」- 字符串</title>
    <url>/ckcha0wzw0015w8tvdby0cld1/</url>
    <content><![CDATA[<h1 id="python类型–字符串"><a href="#python类型–字符串" class="headerlink" title="python类型–字符串"></a>python类型–字符串</h1><blockquote>
<ul>
<li>python中的字符串就是一串字符</li>
<li>python中没有单独的字符类型(c和java有)—<em>一个字符也是字符串、没有字符也是字符串</em></li>
</ul>
<ul>
<li><strong>字符串很多操作和list、tuple是通用的，python称之为sequence（序列）</strong></li>
</ul>
</blockquote>
<hr>
<h2 id="创建字符串"><a href="#创建字符串" class="headerlink" title="创建字符串"></a>创建字符串</h2><ul>
<li>python中<strong>单引号和双引号没有区别</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">'abc'</span></span><br><span class="line">b = <span class="string">"abc"</span></span><br><span class="line"></span><br><span class="line">print(a == b)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出： True</span></span><br></pre></td></tr></table></figure></li>
<li>字符串是大小写敏感的，也就是<u>‘Abc’ 和’abc’是不同的</u></li>
<li>当然也可以用 <strong>str构造函数</strong>来创建字符串<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user1 = str() ---等价于user = <span class="string">''</span>--等价于user = <span class="string">""</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>ps:注意，python多次创建一个字符串，并不会创建多个副本（相对于Java、c++、js而言）</p>
</blockquote>
</li>
</ul>
<hr>
<h2 id="Python字符串都是静态字符串"><a href="#Python字符串都是静态字符串" class="headerlink" title="Python字符串都是静态字符串"></a>Python字符串都是静态字符串</h2><p><strong>无论用任何方式“创建”字符串，其实得到的是同一个对象</strong><br><u>证明</u>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#id(..)函数，可以获取对象在内存中的地址（也叫指针）</span></span><br><span class="line">a = <span class="string">'123'</span></span><br><span class="line">b = <span class="string">"123"</span></span><br><span class="line">c = str(<span class="string">'123'</span>)</span><br><span class="line">d = <span class="string">'1'</span>+<span class="string">'23'</span></span><br><span class="line">e = str(<span class="string">'1'</span>+<span class="string">'23'</span>)</span><br><span class="line"></span><br><span class="line">print(id(a))</span><br><span class="line">print(id(b))</span><br><span class="line">print(id(c))</span><br><span class="line"></span><br><span class="line">输出： <span class="number">1291309978928</span></span><br><span class="line">      <span class="number">1291309978928</span></span><br><span class="line">      <span class="number">1291309978928</span></span><br><span class="line">      <span class="number">1291309978928</span></span><br><span class="line">      <span class="number">1291309978928</span></span><br><span class="line">       <span class="comment">#---只要字符串是相同的，无论用任何方法创造，创造出来都是一样的，不会创造副本</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h2><ol>
<li>索引–作用：找字符串中某一位东西  </li>
</ol>
<p><strong>!!!计算机中的序号，都是从0开始</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">s1 = <span class="string">'abc'</span></span><br><span class="line">print(s1[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出 ：a</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>连接   </li>
</ol>
<p><strong>只有字符串可以连接</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> a = <span class="string">'abc'</span></span><br><span class="line"> b = <span class="string">'ddd'</span></span><br><span class="line"></span><br><span class="line"> print(a+b)</span><br><span class="line"><span class="comment"># 输出： abcddd</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">#!!只需记住不能和不同类型一起加</span></span><br><span class="line"> print(<span class="number">12</span>+<span class="string">'abc'</span>)----报错</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>重复</li>
</ol>
<p><strong>除了+ 和 *，其他数学运算符对str不适用</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'abc'</span>*<span class="number">5</span>)</span><br><span class="line"><span class="comment">#------abcabcabcabcabc</span></span><br></pre></td></tr></table></figure>


<h2 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h2><blockquote>
<p>可以截取字符串中的一部分<br><strong>语法：str1[start:end]</strong>  </p>
</blockquote>
<ul>
<li>用法1：<strong>起点、终点</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">'abcdefg'</span></span><br><span class="line">print(s1[<span class="number">0</span>:<span class="number">3</span>])----取索引<span class="number">0</span><span class="number">-3</span>的内容</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出:abc------顾头不顾尾，不包含索引3的对象</span></span><br></pre></td></tr></table></figure></li>
<li>用法2：<strong>起点</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">'abcdefg'</span></span><br><span class="line">print(s1[<span class="number">3</span>:]) </span><br><span class="line"><span class="comment">#取索引3到结尾的内容</span></span><br><span class="line">输出：defg</span><br></pre></td></tr></table></figure></li>
<li>用法3：<strong>终点</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">'abcdefg'</span></span><br><span class="line">print(s1[:<span class="number">5</span>])---取索引<span class="number">0</span><span class="number">-5</span>的内容，顾头不顾尾</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出：abcde</span></span><br></pre></td></tr></table></figure></li>
<li>用法4： <strong>神经病版</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    s1 = <span class="string">'abcdefg'</span></span><br><span class="line">    print(s1[:])----取字符串所有内容</span><br><span class="line"></span><br><span class="line">    <span class="comment">#输出：abcdefg</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串是静态的，所以用法4毫无意义，但对其他数据结构，却很有用</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><blockquote>
<p>任何字符在计算机中，都会表示为一个数字，这就是字符编码<br>由于历史原因，其实有很多种编码<br><u>ACSII编码<br>gb2312:简体中文<br>GBK:简体中文+繁体中文<br>shift_jis:日文</u></p>
</blockquote>
<p><strong>Unicode</strong>（统一编码)比较特殊，<u>囊括了人类所有语言、符号</u>，而且为未来的语言预留空间</p>
<blockquote>
<p>注：<strong>utf-8是Unicode的一种实现</strong></p>
</blockquote>
<hr>
<h2 id="操作编码"><a href="#操作编码" class="headerlink" title="操作编码"></a>操作编码</h2><ul>
<li><p><strong>字符-&gt;编码–ord()</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ord(<span class="string">'a'</span>)  <span class="comment">#97</span></span><br><span class="line">ord(<span class="string">'智'</span>)  <span class="comment">#26234</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>编码-&gt;字符–chr()</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">chr(<span class="number">97</span>)  <span class="comment">#'a'</span></span><br><span class="line">chr(<span class="number">26234</span>)  <span class="comment">#'智'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>in 和 not in</strong></p>
<blockquote>
<p>判断字符串有没有/是否存在某个东西</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">s1 = <span class="string">'hello world'</span></span><br><span class="line">print(<span class="string">'h'</span><span class="keyword">in</span> s1)</span><br><span class="line">print(<span class="string">'word'</span><span class="keyword">in</span> s1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出： True</span></span><br><span class="line">       <span class="literal">False</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h2><ol>
<li>这种比较<strong>本质上是比较其字符编码</strong></li>
<li><strong>先比较第0个字符编码，如果相同就比较第二个，直到不同为止</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'app'</span>&lt;<span class="string">'bear'</span>)</span><br><span class="line">输出 ：<span class="literal">True</span></span><br><span class="line">print(<span class="string">'apple'</span>&gt;<span class="string">'apply'</span>)</span><br><span class="line">输出：<span class="literal">False</span></span><br><span class="line">print(<span class="string">'Apple'</span> &gt; <span class="string">'apple'</span>)</span><br><span class="line">输出：<span class="literal">False</span></span><br><span class="line">print(<span class="string">'abc'</span> &gt;<span class="string">''</span>)</span><br><span class="line">输出：<span class="literal">True</span></span><br><span class="line"><span class="comment">#------空字符串本质上第一位字符编码是0</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h2 id="字符串循环"><a href="#字符串循环" class="headerlink" title="字符串循环"></a>字符串循环</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    str1 = <span class="string">'Hello'</span></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> str1:------s称之为循环变量，简单来说就是把字符串里面的每个字符以s来丢给你</span><br><span class="line">        print(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  输出：H</span></span><br><span class="line">        e</span><br><span class="line">        l</span><br><span class="line">        <span class="number">1</span></span><br><span class="line">        o</span><br><span class="line">        <span class="comment">#---当然也说过python字符串里面没有真正意义上的字符，所以上面打印出来：</span></span><br><span class="line"></span><br><span class="line">        print(type(s))</span><br><span class="line">        <span class="comment">#输出：&lt;class'str'&gt;---还是个字符串</span></span><br></pre></td></tr></table></figure>


<h2 id="字符串检测"><a href="#字符串检测" class="headerlink" title="字符串检测"></a>字符串检测</h2><table>
<thead>
<tr>
<th>检测方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>isalnum()</td>
<td>是否为字母或数字</td>
</tr>
<tr>
<td>isalpha()</td>
<td>是否为字母</td>
</tr>
<tr>
<td>isdigit()</td>
<td>是否为数字</td>
</tr>
<tr>
<td>isidentifier()</td>
<td>是否是合法标识符</td>
</tr>
<tr>
<td>islower()</td>
<td>是否为全小写</td>
</tr>
<tr>
<td>isupper()</td>
<td>是否为全大写</td>
</tr>
<tr>
<td>isspace()</td>
<td>是否为全标识符</td>
</tr>
</tbody></table>
<ul>
<li>用法举例：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'aaa'</span>.isdigit()    <span class="comment">#False</span></span><br><span class="line"><span class="string">'aaa'</span>.isappha()    <span class="comment">#True</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h2 id="字符串搜索"><a href="#字符串搜索" class="headerlink" title="字符串搜索"></a>字符串搜索</h2><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>find()</td>
<td>从左边找，找到返回下标，没找到返回-1</td>
</tr>
<tr>
<td>rfind()</td>
<td>从右边找，找到返回下标，没找到返回-1</td>
</tr>
<tr>
<td>count(str)</td>
<td>计数</td>
</tr>
<tr>
<td>startswith(str)</td>
<td>是否以str开头</td>
</tr>
<tr>
<td>endswtih(str)</td>
<td>是否以str结尾</td>
</tr>
</tbody></table>
<ul>
<li>用法举例：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">s1 = <span class="string">'abcddef'</span></span><br><span class="line">print(s1.find(<span class="string">'d'</span>))</span><br><span class="line">print(s1.find(<span class="string">'w'</span>))</span><br><span class="line"><span class="comment">#输出：3----只会查找从左开始找的第一个</span></span><br><span class="line"><span class="comment">#输出：-1</span></span><br><span class="line"></span><br><span class="line">print(s1.count(<span class="string">'dd'</span>))</span><br><span class="line"><span class="comment">#输出：1------出现了一次</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.baidu.com'</span></span><br><span class="line">print(url.startswith(<span class="string">'http://'</span>))</span><br><span class="line"><span class="comment">#判断url是否为一个网址，实际用途可以为判断用户输入是否正确</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>#字符串转换<br>|方法|说明|<br>|—-|—-|<br>|upper() | 转为大写|<br>|lower()|  转为小写|<br>|swapcase() | 反转大小写|<br>|capitalize()|  首字母大写|<br>|title()|  每个单词首字母大写|<br>|replace(old,new) | 替换|</p>
<ul>
<li>用法举例:<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'aBeDf'</span>.lower()    <span class="comment">#abedf </span></span><br><span class="line">!!最常用replace(old,new):-------抓取数据有用</span><br><span class="line"><span class="string">'hello world,i am came'</span>.replace(<span class="string">'a'</span>,<span class="string">'A'</span>)</span><br><span class="line"><span class="comment">#'hello world,i Am cAme'</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python 基础</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>「python」- 数字</title>
    <url>/ckcha0wzz0018w8tvchc533u7/</url>
    <content><![CDATA[<h1 id="python中的数字"><a href="#python中的数字" class="headerlink" title="python中的数字"></a>python中的数字</h1><blockquote>
<p>int 整数：23<br>float 浮点数、小数：15.8<br>complex 复数，：-1根号  </p>
</blockquote>
<hr>
<h1 id="三种类型："><a href="#三种类型：" class="headerlink" title="三种类型："></a>三种类型：</h1><h2 id="整数：所有的整数都属于int-类"><a href="#整数：所有的整数都属于int-类" class="headerlink" title="整数：所有的整数都属于int 类"></a><strong>整数</strong>：所有的整数都属于int 类</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">12</span></span><br><span class="line">print(type(a))</span><br><span class="line"></span><br><span class="line">输出 &lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">#<span class="title">python3</span>里面没有<span class="title">long</span>，也用不着<span class="title">long</span></span></span><br><span class="line"><span class="class">//<span class="title">c</span>语言中</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">a</span> ---32位整数</span></span><br><span class="line"><span class="class"><span class="title">long</span> <span class="title">b</span> ---64位整数</span></span><br><span class="line"><span class="class"><span class="title">long</span> <span class="title">long</span> <span class="title">c</span> ---128位整数</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">#<span class="title">python</span>的整数可以非常大</span></span><br><span class="line">a = 999999999999999999999999999999</span><br><span class="line">print(a)</span><br><span class="line">输出：<span class="number">999999999999999999999999999999</span></span><br></pre></td></tr></table></figure>

<h2 id="浮点数：所有浮点数都属于float类"><a href="#浮点数：所有浮点数都属于float类" class="headerlink" title="浮点数：所有浮点数都属于float类"></a><strong>浮点数</strong>：所有浮点数都属于float类</h2><blockquote>
<p>（带了小数点都属于浮点数）</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">12.5</span></span><br><span class="line">print(type(a))</span><br><span class="line">输出&lt;<span class="class"><span class="keyword">class</span>'<span class="title">float</span>'&gt;</span></span><br><span class="line"><span class="class">#<span class="title">python</span>中没有<span class="title">double</span>，也用不着<span class="title">double</span></span></span><br><span class="line"><span class="class">//<span class="title">c</span>语言中</span></span><br><span class="line"><span class="class"><span class="title">float</span> <span class="title">a</span>:</span> -<span class="number">-32</span>位浮点数--小数点后<span class="number">8</span>位</span><br><span class="line">double b;-<span class="number">-128</span>位浮点数--小数点后<span class="number">10</span>^<span class="number">308</span>位</span><br></pre></td></tr></table></figure>

<h2 id="复数：复数都是complex类"><a href="#复数：复数都是complex类" class="headerlink" title="复数：复数都是complex类"></a><strong>复数</strong>：复数都是complex类</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">15</span>+<span class="number">3j</span></span><br><span class="line">b = <span class="number">8</span><span class="number">-2j</span></span><br><span class="line"></span><br><span class="line">print(a+b)</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="类型检测"><a href="#类型检测" class="headerlink" title="类型检测"></a>类型检测</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#type(x)可以用来检测类型</span></span><br><span class="line">type(<span class="number">120</span>)  <span class="comment">#int</span></span><br><span class="line">type(<span class="number">5.0</span>)  <span class="comment">#float</span></span><br><span class="line">type(<span class="number">12</span>+<span class="number">0j</span>) <span class="comment">#complex</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="Python运算符"><a href="#Python运算符" class="headerlink" title="Python运算符"></a>Python运算符</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#基本运算符（+-*/）和其他语言都一样，但也有些不一样的</span></span><br><span class="line"><span class="comment">#正常除法</span></span><br><span class="line"><span class="number">16</span>/<span class="number">5</span>   <span class="comment">#3.2</span></span><br><span class="line"><span class="number">16</span>%<span class="number">5</span>   <span class="comment">#1--余数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#整除</span></span><br><span class="line"><span class="number">16</span>//<span class="number">5</span>  <span class="comment">#3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#幂操作</span></span><br><span class="line">print(<span class="number">3</span>**<span class="number">100</span>)  两个*代表多少次方</span><br><span class="line">--&gt;转个思路--&gt;print(9**0.5)   9的二分之一次方就是开根号</span><br><span class="line"></span><br><span class="line"><span class="comment">#扩展赋值</span></span><br><span class="line">a = <span class="number">15</span></span><br><span class="line">a = a + <span class="number">5</span>-------等价于 a += <span class="number">5</span></span><br><span class="line">print(a)</span><br><span class="line">输出： <span class="number">20</span></span><br><span class="line"></span><br><span class="line">-----python没有++ -- 操作</span><br><span class="line">i++  ==&gt;  i+=1</span><br><span class="line">i--  ==&gt;  i-=1</span><br><span class="line"><span class="comment">#python没有自增、自减操作，也不需要</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#运算符优先级</span></span><br><span class="line"><span class="number">12</span>+<span class="number">6</span>/<span class="number">2</span>  <span class="comment">#15</span></span><br><span class="line">(<span class="number">12</span>+<span class="number">6</span>)/<span class="number">2</span>  <span class="comment">#9</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="优先级表："><a href="#优先级表：" class="headerlink" title="优先级表："></a>优先级表：</h2><p><strong>括号&gt;函数&gt;列表/属性&gt;数值运算&gt;逻辑运算&gt;赋值</strong></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python 基础</tag>
        <tag>数字</tag>
      </tags>
  </entry>
  <entry>
    <title>SQlite3 &amp; Navicat premium15 初步认识与使用</title>
    <url>/ckcha0x01001aw8tvhf2p2kr0/</url>
    <content><![CDATA[<h1 id="SQlite3安装教程与初步使用-amp-amp-navicat-premium15"><a href="#SQlite3安装教程与初步使用-amp-amp-navicat-premium15" class="headerlink" title="SQlite3安装教程与初步使用 &amp;&amp; navicat premium15"></a>SQlite3安装教程与初步使用 &amp;&amp; navicat premium15</h1><blockquote>
<ol>
<li>什么是sqlite？SQLite是一个小型的C程序库，实现了独立的，可嵌入的，零配置的SQL数据库引擎   </li>
<li>什么是navicat premium，很多小白常常误解navicat也是数据库软件。我在知乎上看到这么一个问题:  </li>
</ol>
<p><strong>Q:”navicat premium那么好用为什么还要学习mysql?”</strong>,<u>有个网友回答的非常巧妙</u><br><strong>A:”你这个问题大概相当于 有个水龙头就可以接水了干嘛还要自来水供水系统 “</strong>  </p>
</blockquote>
<ul>
<li>是的，自来水供水系统(mysql)来管理控制水(数据)，有很多种接水方法，水龙头(navicat)也可以是其中一种。  </li>
<li>navicat系列软件只是用来<strong>管理这些数据库的图形化的数据库管理工具</strong>,当然你也可以直接去供水系统去接水。  </li>
<li>而这个自来水供水系统有很多就是我们常见的数据库软件(oracle mysql sqlite….)</li>
</ul>
<h2 id="👉-为什么选择sqlite"><a href="#👉-为什么选择sqlite" class="headerlink" title="👉 为什么选择sqlite?"></a>👉 为什么选择sqlite?</h2><ol>
<li><strong>优点</strong><ul>
<li><strong>不麻烦</strong>：<strong>极其</strong>轻量，无需进行管理和配置，下载就可以用，占用内存几百K–&gt;单文件数据库</li>
<li><strong>不鸡肋</strong>：支持完整的<code>SQL</code>功能，能够处理TB级的数据</li>
</ul>
<ul>
<li><strong>够广</strong>：SQLite 号称是部署和使用最广泛的数据库引擎，因为sqlite没有版权的限制，只要你想用就用</li>
</ul>
<ul>
<li><strong>很和谐</strong>：兼容性高，可以非常方便的以多种形式嵌入到其他应用程序中，如静态库、动态库等</li>
</ul>
</li>
<li><strong>缺点</strong><ul>
<li><strong>不能大量”写我”</strong>：SQLite适合于高查询、低写入类型地网站，如果一个网站有非常多地写操作，那SQLite就不再适合它。虽然sqlite支持无限数量的同时读取，可是在任何时候都只允许一个写入，虽然可以排队，但是无法应对<strong>高并发</strong>的要求</li>
</ul>
<ul>
<li><strong>不能超级大</strong>：你说嗯？不鸡肋？当然这里我是相对来说，官网称最大支持140TB，(够用了吧)，当然还是有些大型数据集会超过，就不能用sqlite</li>
</ul>
</li>
</ol>
<hr>
<h2 id="😀引言：SQlite官网有这么一句话："><a href="#😀引言：SQlite官网有这么一句话：" class="headerlink" title="😀引言：SQlite官网有这么一句话："></a>😀引言：SQlite官网有这么一句话：</h2><p><code>SQLite is not directly comparable to client/server SQL database engines such as MySQL, Oracle, or SQL Server since SQLite is trying to solve a different problem</code></p>
<blockquote>
<p>这句话大概意思就是SQlite的出现不是为了和 <code>MySQL</code>, <code>Oracle</code>, <code>SQL Server</code>等竞争的,是为了  </p>
</blockquote>
<div align = center>👇👇👇👇👇👇👇👇</div>

<p><strong><div align = center><font face="造字工房情书体（非商用）" color=black size=5>解决问题的！</font></strong></p>
</div>

<hr>
<h2 id="好像跑题了😳！入正题！主题1：SQlite3下载安装与使用"><a href="#好像跑题了😳！入正题！主题1：SQlite3下载安装与使用" class="headerlink" title="好像跑题了😳！入正题！主题1：SQlite3下载安装与使用"></a>好像跑题了😳！入正题！主题1：SQlite3下载安装与使用</h2><h3 id="下载SQlite方式"><a href="#下载SQlite方式" class="headerlink" title="下载SQlite方式"></a><strong>下载SQlite方式</strong></h3><table>
<thead>
<tr>
<th>下载方式</th>
<th>取件码</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.sqlite.org/download.html" target="_blank" rel="noopener" title="还不点进去！">SQlite官网</a></td>
<td>无</td>
</tr>
<tr>
<td><a href="https://c-t.work/s/05cea01ce5e442" target="_blank" rel="noopener" title="不舍得点吗？！">奶牛快传</a></td>
<td>kyt8zz</td>
</tr>
<tr>
<td><a href="https://pan.baidu.com/s/1AqBfp8lvDiEWlYu-V_uyvw" target="_blank" rel="noopener" title="不舍得点吗？！">百度网盘</a></td>
<td>bxpb</td>
</tr>
<tr>
<td><a href="https://wws.lanzous.com/icGpDe7hr4j" target="_blank" rel="noopener" title="不舍得点吗！">蓝奏云</a></td>
<td>无</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>关于下载：奶牛快传7天就会失效，还有其他如果失效麻烦评论我来打救你们</strong></p>
<blockquote>
<p>提供的三个网盘的下载都是win10 64位和32位版本</p>
</blockquote>
</blockquote>
<hr>
<h3 id="下载安装步骤"><a href="#下载安装步骤" class="headerlink" title="下载安装步骤"></a><strong>下载安装步骤</strong></h3><p><strong>1. 下载方式1(官网)</strong><br><img src= "/img/loading.gif" data-src="https://pic.downk.cc/item/5f02f5e014195aa594f4bf1d.png" alt="官网下载文件具体图"><br><strong>2. 下载方式2(网盘)</strong><br><img src= "/img/loading.gif" data-src="https://pic.downk.cc/item/5f02f33e14195aa594f392ce.png" alt="从网盘后下载后图"></p>
<blockquote>
<p>ps 关于图中或者压缩包里的文件说明一下，文件名有tools的是工具（即图中标3）压缩包。<br> 1，2是动态链接库文件，鉴于博主好奇的天性加上参考其他博主的操作发现！<br> ！！没有1，2好像也没问题，只要有tools就行，不过就这么小 你也不好意思不下载吧</p>
</blockquote>
<hr>
<p><strong>3. 安装</strong></p>
<blockquote>
<ul>
<li>这个是从鄙人下载下来的压缩包,全部解压完整理后就是如图</li>
<li>解压那个tool之后 又是一个文件夹把里面的东西移出来和 解压的32位/64位的文件放在一起）<br><img src= "/img/loading.gif" data-src="https://pic.downk.cc/item/5f02f35f14195aa594f3a1ed.png" alt="最终文件夹文件显示图"></li>
</ul>
</blockquote>
<hr>
<p>👆👆👆👆</p>
<blockquote>
<p>到此为止,你已经得到了一个sqlite3,是的,可以用了。打开<code>sqlite3.exe</code>就可以创建数据库等操作</p>
</blockquote>
<hr>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a><strong>配置环境变量</strong></h3><blockquote>
<p>不过用之前为了方便使用sqlite3，这个方便怎么说呢？<br>就是为了你能在命令行(cmd)中<strong>直接操作</strong>,在<strong>系统环境变量中</strong>添加sqlite3<br><img src= "/img/loading.gif" data-src="https://pic.downk.cc/item/5f02f39014195aa594f3b54e.png" alt="第一步"><br><img src= "/img/loading.gif" data-src="https://pic.downk.cc/item/5f02f3b414195aa594f3c44e.png" alt="第二步"><br><img src= "/img/loading.gif" data-src="https://pic.downk.cc/item/5f02f40014195aa594f3e860.png" alt="第三步"><br><img src= "/img/loading.gif" data-src="https://pic.downk.cc/item/5f02f42014195aa594f3f48a.png" alt="第四步"><br><img src= "/img/loading.gif" data-src="https://pic.downk.cc/item/5f02f43214195aa594f3fc17.png" alt="第五步"></p>
</blockquote>
<hr>
<p>👇👇👇<strong>注意</strong></p>
<blockquote>
<p>这里我细讲一下新建那个路径的具体意思:就是刚才读者们整合出来的五个文件（上面贴图了）所在的文件夹，把这个文件夹路径填入到系统环境变量那里，比如我的是在d盘下的sqlite3文件夹，你们的可能不同</p>
</blockquote>
<hr>
<h3 id="下载安装配置结束"><a href="#下载安装配置结束" class="headerlink" title="下载安装配置结束"></a><strong>下载安装配置结束</strong></h3><blockquote>
<p>到此为止 是真的结束了  </p>
</blockquote>
<hr>
<h3 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a><strong>开始操作</strong></h3><blockquote>
<p>接下来就开始操作了，不过sqlite 语法 还是和sql server 语法有一些不同具体可以看看教程，这里推荐一个比较基础的教程：<a href="https://www.runoob.com/sqlite/sqlite-tutorial.html" target="_blank" rel="noopener" title="不会还不点进去？">菜鸟教程</a></p>
</blockquote>
<p><strong>1. 检查</strong></p>
<blockquote>
<p>检查一下sqlite3是不是已经成功在你电脑上并且能从命令行中直接打开。<br>Ctrl + R输入cmd 打开命令行执行 <code>sqlite3</code> ,如果是下面的图 ，恭喜你，你是真的有这个孩子了👶。</p>
</blockquote>
<p><img src= "/img/loading.gif" data-src="https://pic.downk.cc/item/5f02f46a14195aa594f41356.png" alt="操作成功图"></p>
<hr>
<p><strong>2. 创建数据库</strong></p>
<blockquote>
<p>我以创建一个在d盘目录下的一个名字为mykey.db的数据库作为例子吧。</p>
</blockquote>
<ul>
<li>按照你们自己想创建的目录下面创建一个自己的数据库文件吧！！创建操作示例如图 </li>
</ul>
<p><img src= "/img/loading.gif" data-src="https://pic.downk.cc/item/5f02f48e14195aa594f424a8.png" alt="创建过程图"><br><img src= "/img/loading.gif" data-src="https://pic.downk.cc/item/5f02f4be14195aa594f43968.png" alt="查看数据库文件所在文件夹图"></p>
<hr>
<h3 id="sqlite3总结"><a href="#sqlite3总结" class="headerlink" title="sqlite3总结"></a><strong>sqlite3总结</strong></h3><ul>
<li>那么关于sqlite3 我已经讲的差不多了语法啥的 很多资源都可以学！！不难！！<br>推荐一篇文章，里面有sqlite3具体操作<br><a href="https://blog.csdn.net/nan_lei/article/details/84344003" target="_blank" rel="noopener">这篇文章快点进去</a></li>
<li>我所认为的SQlite意义并不在于其本身，而是其兼容性广，意义在于在多种嵌入式设备中都能使用，并且单个文件的数据库实在是太便携了，你可以用python、java、c语言来连接SQlite实现更多的功能</li>
</ul>
<hr>
<h2 id="主题2：navicat-premium15-amp-amp-navicat与SQlite的初步连接😀"><a href="#主题2：navicat-premium15-amp-amp-navicat与SQlite的初步连接😀" class="headerlink" title="主题2：navicat premium15 &amp;&amp; navicat与SQlite的初步连接😀"></a>主题2：navicat premium15 &amp;&amp; navicat与SQlite的初步连接😀</h2><blockquote>
<ol>
<li>首先再次明确一下，<strong>navicat 不是一个数据库软件，具体来说是个管理数据库软件。</strong>  </li>
</ol>
</blockquote>
<p><strong>navicat premium的来源 <del>瞎说</del></strong></p>
<ol>
<li>解释如下：<ul>
<li>可以看到刚才用cmd 使用sqlite 的时候是不是觉得有点无趣 ，boring，嗯继续用下去，就会丧失兴趣，祖国就会少了一朵花朵，一系列蝴蝶效应，所以就有那么一个软件</li>
<li>那么这个软件的作用就是让你可视化 什么叫可视化 就是让你直接看到，他能让数据库图形化，并且创建表都变得很简单直接点就行，不用再输入语句，当然你也可以输入语句</li>
</ul>
<ul>
<li>而这么好的软件，肯定要合作。 所以有很多软件navicat for mysql ,navicate for oracle,navicat for sqlite等等等一万个等（当我没说），实际上支持的有这么多，上图</li>
<li>是的已经够了，那么为了方便，就出现了这么一个通用版navicat premium，这个软件要qian，？什么pojie？？支持正版！<br><img src= "/img/loading.gif" data-src="https://pic.downk.cc/item/5f02de0c14195aa594ebd15b.jpg" alt="navicat支持连接的数据库">  <h3 id="下载安装使用"><a href="#下载安装使用" class="headerlink" title="下载安装使用"></a><strong>下载安装使用</strong></h3></li>
</ul>
</li>
</ol>
<p><strong>1. 下载</strong></p>
<blockquote>
<p>还是开心的（卑微）给大家分享 navicat premium15的安装包和注册机（win10 64位）</p>
<blockquote>
<p>下载之前把杀毒软件都退出了吧/(ㄒoㄒ)/~~  </p>
</blockquote>
</blockquote>
<table>
<thead>
<tr>
<th>下载方式</th>
<th>取件码</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://c-t.work/s/0794e6f5470a45" target="_blank" rel="noopener" title="不舍得点吗？！">奶牛快传</a></td>
<td>5mt77y</td>
</tr>
<tr>
<td><a href="https://pan.baidu.com/s/1Xp40GTRUJNNwU6Al9UH9Ag" target="_blank" rel="noopener" title="不舍得点吗？！">百度网盘</a></td>
<td>eovh</td>
</tr>
<tr>
<td><a href="https://wws.lanzous.com/i3IlHe7lhkj" target="_blank" rel="noopener" title="不舍得点吗！">蓝奏云</a></td>
<td>无</td>
</tr>
<tr>
<td>—</td>
<td></td>
</tr>
<tr>
<td><strong>2. PoJie(支持正版)</strong></td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<p>pojie 步骤<a href="https://www.cnblogs.com/zenglintao/p/12823285.html" target="_blank" rel="noopener" title="支持正版">悄悄点进来吧</a></p>
</blockquote>
<hr>
<p><strong>3. 实际操作</strong></p>
<ul>
<li><del><strong>页面欣赏</strong></del><br><img src= "/img/loading.gif" data-src="https://pic.downk.cc/item/5f02f4e314195aa594f4498d.png" alt="高大上&amp;简约风的navicat界面"></li>
</ul>
<hr>
<ul>
<li><strong>连接SQlite</strong><blockquote>
<p>我们以刚才我们创建的 mykey.db 作为例子 去连接这个数据库  </p>
</blockquote>
</li>
</ul>
<p><img src= "/img/loading.gif" data-src="https://pic.downk.cc/item/5f02f4ff14195aa594f4596a.png" alt="第一步选择连接sqlite数据库"><br><img src= "/img/loading.gif" data-src="https://pic.downk.cc/item/5f02f51b14195aa594f4655b.png" alt="第二步填写创建的.db文件所在路径，填写连接名字"><br><img src= "/img/loading.gif" data-src="https://pic.downk.cc/item/5f02f53e14195aa594f47543.png" alt="第三步检查连接"><br><img src= "/img/loading.gif" data-src="https://pic.downk.cc/item/5f02f55a14195aa594f48163.png" alt="第四步打开连接"><br><img src= "/img/loading.gif" data-src="https://pic.downk.cc/item/5f02f57714195aa594f48de6.png" alt="第五步检查连接"><br><img src= "/img/loading.gif" data-src="https://pic.downk.cc/item/5f02f59714195aa594f49b75.png" alt="进入创建的数据库"><br><img src= "/img/loading.gif" data-src="https://pic.downk.cc/item/5f02f5b614195aa594f4aa58.png" alt="查看内容"></p>
<h3 id="navicat总结"><a href="#navicat总结" class="headerlink" title="navicat总结"></a>navicat总结</h3><ul>
<li>navicat的作用就是让我们管理数据库的时候更加方便，更加直观的看到我们想做什么</li>
<li>这里只是这两部分知识的皮毛，更多的知识需要我们去探索，加油吧。</li>
</ul>
]]></content>
      <categories>
        <category>SQlite3</category>
        <category>Navicat</category>
      </categories>
      <tags>
        <tag>SQlite3</tag>
        <tag>Navicat Premium 15</tag>
        <tag>数据库</tag>
        <tag>sql</tag>
        <tag>SQLite 语法</tag>
      </tags>
  </entry>
  <entry>
    <title>「python」- 数据类型转换</title>
    <url>/ckcha0x04001dw8tv0no9dqxy/</url>
    <content><![CDATA[<h1 id="python之数据类型转换"><a href="#python之数据类型转换" class="headerlink" title="python之数据类型转换"></a>python之数据类型转换</h1><blockquote>
<p>下面用代码来说明吧</p>
</blockquote>
<pre><code class="python">s = <span class="string">'5.8'</span>                 <span class="comment">#定义一个字符串</span>
a = <span class="number">5</span>                     <span class="comment">#定义一个变量=5</span>
b = <span class="number">5.8</span>
print(float(s)+<span class="number">1.6</span>)       <span class="comment">#7.4   把字符串转换为浮点型之后与1.6相加得到 7.4</span>
print(float(a))          <span class="comment">#5.0   把整型变量转换为浮点型</span>
print(int(b))            <span class="comment">#5     把float类型转换为int类型--这里只是截取整数部分，并非四舍五入</span>
print(str(a)+s)          <span class="comment">#55.8  注意这里并非数值55.8，只是将5转换为字符串类型然后和5.8拼接</span>

print(round(<span class="number">3.5</span>))         <span class="comment">#4   这才是四舍五入</span>
print(round(<span class="number">3.2</span>))         <span class="comment">#3    四舍五入</span>





</code></pre>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python 基础</tag>
        <tag>数据类型</tag>
      </tags>
  </entry>
</search>
