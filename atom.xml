<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tanxy</title>
  
  <subtitle>Code For U</subtitle>
  <link href="https://tanxy.club/atom.xml" rel="self"/>
  
  <link href="https://tanxy.club/"/>
  <updated>2020-11-23T11:58:20.939Z</updated>
  <id>https://tanxy.club/</id>
  
  <author>
    <name>Tan35</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>那些年你错过的网站</title>
    <link href="https://tanxy.club/ckici5lbs0002istvam285e12/"/>
    <id>https://tanxy.club/ckici5lbs0002istvam285e12/</id>
    <published>2020-08-24T07:32:22.000Z</published>
    <updated>2020-11-23T11:58:20.939Z</updated>
    
    <content type="html"><![CDATA[<p>实用网站分享</p><a id="more"></a><h1><b><font face="Sarasa Mono HC"  color=black>前言</font></b></h1><blockquote><p><font face="Sarasa Mono HC" size=3.4 color=black>每天活在这个包罗万象的世界中，你一定对这个世界充满了好奇。今天，就让我来满足你的好奇心。</font></p></blockquote><h2 id="b-font-face-Sarasa-Mono-HC-color-black-娱乐-font-b"><b><font face="Sarasa Mono HC"  color=black>娱乐</font></b></h2><ul><li><font face="Sarasa Mono HC" size=4 color=black><a href="http://chordsurfer.redbull.com/" target="_blank" rel="noopener" title="进来玩玩吧">Chordsurfer</a></font></li></ul><blockquote><p><font face="Sarasa Mono HC" size=3.5 color=black>一款节奏不错的跑酷型网站游戏</font></p></blockquote><ul><li><font face="Sarasa Mono HC" size=4 color=black><a href="https://aidn.jp/mikutap/" target="_blank" rel="noopener" title="进来玩玩吧">Mikutap</a></font></li></ul><blockquote><p><font face="Sarasa Mono HC" size=3.5 color=black>打开这个网站，你会感叹这个世界错失了一位&quot;音乐家&quot;，<mark>欢迎battle<mark></font></p></blockquote><iframe src="http://player.bilibili.com/player.html?aid=456906892&cid=230216552&page=1" align="middle" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><hr><h2 id="b-font-face-Sarasa-Mono-HC-color-black-效率-font-b"><b><font face="Sarasa Mono HC"  color=black>效率</font></b></h2><ul><li><font face="Sarasa Mono HC" size=4 color=black><a href="https://www.tablesgenerator.com/markdown_tables" target="_blank" rel="noopener">Markdown表格生成工具</a></font></li></ul><blockquote><p><font face="Sarasa Mono HC" size=3.5 color=black>可以进行传统的可视化编辑表格，自由创作表格。点击 <code>Generate</code> 即可进行 <code>markdown</code> 语言的转换</font></p></blockquote><ul><li><font face="Sarasa Mono HC" size=4 color=black><a href="https://hanabi.data-viz.cn/index?lang=zh-CN" target="_blank" rel="noopener">花火-在线数据短视频工具</a></font></li></ul><blockquote><p><font face="Sarasa Mono HC" size=3.5 color=black>以视频或者gif方式可视化数据，</font></p></blockquote><p><img src="https://pic.downk.cc/item/5f4de712160a154a677cc128.gif" alt=""></p><ul><li><font face="Sarasa Mono HC" size=4 color=black><a href="https://www.deepl.com/translator" target="_blank" rel="noopener">DeepL翻译网站</a></font></li></ul><blockquote><p><font face="Sarasa Mono HC" size=3.5 color=black>人工智能翻译？</font></p></blockquote><hr><h2 id="b-font-face-Sarasa-Mono-HC-color-black-素材-font-b"><b><font face="Sarasa Mono HC"  color=black> 素材</font></b></h2><ul><li><font face="Sarasa Mono HC" size=4 color=black><a href="https://unsplash.com/" target="_blank" rel="noopener">Unsplash</a></font></li></ul><blockquote><p><font face="Sarasa Mono HC" size=3.5 color=black>最知名的无版权图片网站之一,图片质量很好，壁纸偏多。另外也有实时更新的话题图片，比如 <code>COVID-19</code>  话题,但是国内访问速度可能会稍慢，最好能<mark>那个</mark>。</font></p></blockquote><ul><li><font face="Sarasa Mono HC" size=4 color=black><a href="https://pixabay.com/zh/" target="_blank" rel="noopener">Pixabay</a></font></li></ul><blockquote><p><font face="Sarasa Mono HC" size=3.5 color=black>全球最大的免费图片网站，种类而且丰富，另外访问速度比 <u>Unsplash</u> 要好。</font></p></blockquote><ul><li><font face="Sarasa Mono HC" size=4 color=black><a href="https://www.pinterest.com/" target="_blank" rel="noopener">Pinterest</a></font></li></ul><blockquote><p><font face="Sarasa Mono HC" size=3.5 color=black><u>图片社交</u> <u>瀑布流图片形式的社区</u> <u>设计师必备</u> <u>以图搜图</u> 要<mark>那个</mark>。</font></p></blockquote><ul><li><font face="Sarasa Mono HC" size=4 color=black><a href="https://huaban.com/" target="_blank" rel="noopener">花瓣网</a></font></li></ul><blockquote><p><font face="Sarasa Mono HC" size=3.5 color=black>可以看作是 <u>Pinterest</u> 的替代品</font></p></blockquote><ul><li><font face="Sarasa Mono HC" size=4 color=black><a href="https://www.zcool.com.cn/" target="_blank" rel="noopener">站酷网</a></font></li></ul><blockquote><p><font face="Sarasa Mono HC" size=3.5 color=black>偏灵感素材较多：字体、插画等，比较活泼的一个网站</font></p></blockquote><hr><h2 id="b-font-face-Sarasa-Mono-HC-color-black-宝藏-font-b"><b><font face="Sarasa Mono HC"  color=black> 宝藏</font></b></h2><ul><li><font face="Sarasa Mono HC" size=4 color=black><a href="https://www.coocn.cn/music/decode/" target="_blank" rel="noopener">VIP音乐转码</a></font></li></ul><blockquote><p><font face="Sarasa Mono HC" size=3.5 color=black>(支持正版)，可将vip歌曲的加密格式转换为 <code>ogg</code> 格式。</font></p></blockquote><ul><li><font face="Sarasa Mono HC" size=4 color=black><a href="http://gitd.cc/" target="_blank" rel="noopener">Github代下载</a></font></li></ul><blockquote><p><font face="Sarasa Mono HC" size=3.5 color=black>“Git克隆慢？一些源码包下不动？试试我”</font></p></blockquote><ul><li><font face="Sarasa Mono HC" size=4 color=black><a href="https://colorhunt.co/" target="_blank" rel="noopener">设计配色网站</a></font></li></ul><blockquote><p><font face="Sarasa Mono HC" size=3.5 color=black>提供优秀配色方案，打救色弱的我</font></p></blockquote>]]></content>
    
    
    <summary type="html">实用网站分享</summary>
    
    
    
    <category term="推荐" scheme="https://tanxy.club/categories/%E6%8E%A8%E8%8D%90/"/>
    
    
    <category term="网站推荐" scheme="https://tanxy.club/tags/%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/"/>
    
    <category term="图片素材" scheme="https://tanxy.club/tags/%E5%9B%BE%E7%89%87%E7%B4%A0%E6%9D%90/"/>
    
    <category term="vip歌曲转换" scheme="https://tanxy.club/tags/vip%E6%AD%8C%E6%9B%B2%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>Flex Layout + SVG 实现 Apple动效练习[参考陈东泽]</title>
    <link href="https://tanxy.club/ckici5lcf000pistv7jpb6zwa/"/>
    <id>https://tanxy.club/ckici5lcf000pistv7jpb6zwa/</id>
    <published>2020-08-18T08:49:32.000Z</published>
    <updated>2020-11-24T00:47:46.148Z</updated>
    
    <content type="html"><![CDATA[<h1>Flex Layout + SVG  实现 Apple 动效</h1><blockquote><p>本文参考于大佬 陈东泽的<a href="https://sspai.com/post/61121" target="_blank" rel="noopener">文章</a></p></blockquote><p><img src="https://pic.downk.cc/item/5f3b8f3b14195aa594ea0185.jpg" alt=""></p><blockquote><p>看了 陈东泽大佬对于Apple公众号里面的–&gt;<a href="https://sspai.com/post/61121" target="_blank" rel="noopener">排版讲解</a>。突然有点想学前端了，有趣。</p></blockquote><h2 id="CSS学习中">CSS学习中</h2><blockquote><p>A B C D E的布局分布css代码大概是这样</p></blockquote><p><img src="https://pic.downk.cc/item/5f3b8fe114195aa594ea71e6.jpg" alt=""></p><h2 id="￼0"><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style="display: flex"&gt;</span><br><span class="line">    &lt;div style="display: flex; width: 50%; flex-direction: column;"&gt;</span><br><span class="line">         &lt;div style="display: block;"&gt;</span><br><span class="line">                 &lt;!<span class="selector-tag">--</span> 内容 <span class="selector-tag">A</span> <span class="selector-tag">--</span>&gt;</span><br><span class="line">         &lt;/div&gt;</span><br><span class="line">        &lt;div style="display: block;"&gt;</span><br><span class="line">                &lt;!<span class="selector-tag">--</span> 内容 <span class="selector-tag">B</span> <span class="selector-tag">--</span>&gt;</span><br><span class="line">         &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div style="display: flex; width: 50%;flex-direction:column;"&gt;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> 内容 <span class="selector-tag">C</span> <span class="selector-tag">--</span>&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div style="display: flex; flex-direction:column;"&gt;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> 内容 <span class="selector-tag">D</span> <span class="selector-tag">--</span>&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div style="display: flex; flex-direction:column;"&gt;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> 内容 <span class="selector-tag">E</span> <span class="selector-tag">--</span>&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></h2><h2 id="仿照">仿照</h2><blockquote><p>仿照修改了一个，是真的有意思，突然想对放下已久的微信公众号动刀</p></blockquote><section style="display: block;text-align: center;">  <div style="display: flex;background-color: #000000;">    <div style="display: flex;width: 50%;flex-direction: column;">      <div style="display: block;height: 0px !important;"><svg xmlns="http://www.w3.org/2000/svg" opacity="0"          height="100%" width="100%" data-filename="03_01.jpg"          style="display: flex;background-image: url(&quot;https://pic.downk.cc/item/5f3a943a14195aa594af8543.gif&quot;);background-color: #000000;background-size: 100% auto;background-repeat: no-repeat;padding-top: 100%;width: 100%;transform: rotateZ(0.00deg);-webkit-transform: rotateZ(0.00deg);-moz-transform: rotateZ(0.00deg);-o-transform: rotateZ(0.00deg);-webkit-transform: rotateZ(0.00deg);-moz-transform: rotateZ(0.00deg);-o-transform: rotateZ(0.00deg);">          <animate attributeName="opacity" restart="whenNotActive" begin="click" dur="2s" keyTimes="0; 0.01; 0.70; 1"            values="0; 1; 1; 0;"></animate>        </svg></div>      <div data-filename="02_01.gif"        style="display: flex;background-image: url(&quot;https://pic.downk.cc/item/5f3aa49514195aa594b3ad5f.png&quot;);background-color: rgb(0, 0, 0);background-size: 100%;background-repeat: no-repeat;padding-top: 100%;width: 100%;">      </div>      <div style="display: block;height: 0px !important;"><svg xmlns="http://www.w3.org/2000/svg" opacity="0"          height="100%" width="100%" data-filename="03_02.jpg"          style="display: flex;background-image: url(&quot;https://pic.downk.cc/item/5f3aa8fa14195aa594b4c7b2.gif&quot;);background-color: #000000;background-size: 100% auto;background-repeat: no-repeat;padding-top: 100%;width: 100%;transform: rotateZ(0.00deg);-webkit-transform: rotateZ(0.00deg);-moz-transform: rotateZ(0.00deg);-o-transform: rotateZ(0.00deg);-webkit-transform: rotateZ(0.00deg);-moz-transform: rotateZ(0.00deg);-o-transform: rotateZ(0.00deg);">          <animate attributeName="opacity" restart="whenNotActive" begin="click" dur="2s" keyTimes="0; 0.01; 0.70; 1"            values="0; 1; 1; 0;"></animate>        </svg></div><svg data-filename="02_02.jpg" preserveAspectRatio="xMinYMin meet"        style="display: flex;background-image: url(&quot;https://pic.downk.cc/item/5f3aa43714195aa594b39780.png&quot;);background-color: rgb(0, 0, 0);background-size: 100%;background-repeat: no-repeat;width: 100%;"        viewBox="0 0 540 540" xmlns="http://www.w3.org/2000/svg"></svg>    </div>    <div style="display: flex;width: 50%;flex-direction: column;">      <div style="display: block;height: 0px !important;"><svg data-filename="02_03.gif"          preserveAspectRatio="xMinYMin meet"          style="display: flex;background-image: url(&quot;https://pic.downk.cc/item/5f3aaf2b14195aa594b64cb6.png&quot;);background-color: #141414;background-size: 100% auto;background-repeat: no-repeat;width: 100%;margin-top: 50%;transform: rotateZ(0.00deg);-webkit-transform: rotateZ(0.00deg);-moz-transform: rotateZ(0.00deg);-o-transform: rotateZ(0.00deg);-webkit-transform: rotateZ(0.00deg);-moz-transform: rotateZ(0.00deg);-o-transform: rotateZ(0.00deg);"          viewBox="0 0 540 540" xmlns="http://www.w3.org/2000/svg"></svg></div>      <div style="display: block;height: 0px !important;"><svg xmlns="http://www.w3.org/2000/svg" opacity="0"          height="100%" width="100%" data-filename="03_03_15_opt70.gif"          style="display: flex;background-image: url(&quot;https://pic.downk.cc/item/5f3aad0314195aa594b5d91b.gif&quot;);background-color: #000000;background-size: 100% auto;background-repeat: no-repeat;padding-top: 200%;width: 100%;transform: rotateZ(0.00deg);-webkit-transform: rotateZ(0.00deg);-moz-transform: rotateZ(0.00deg);-o-transform: rotateZ(0.00deg);-webkit-transform: rotateZ(0.00deg);-moz-transform: rotateZ(0.00deg);-o-transform: rotateZ(0.00deg);">          <animate attributeName="opacity" restart="whenNotActive" begin="click" dur="5s" keyTimes="0; 0.01; 0.70; 1"            values="0; 1; 1; 0;"></animate>        </svg></div><svg data-filename="02_03.jpg" preserveAspectRatio="xMinYMin meet"        style="display: flex;background-image: url(&quot;https://pic.downk.cc/item/5f3a554014195aa5949fd13a.jpg&quot;);background-color: rgb(0, 0, 0);background-size: 100%;background-repeat: no-repeat;width: 100%;"        viewBox="0 0 540 1080" xmlns="http://www.w3.org/2000/svg"></svg>    </div>  </div>  <div style="display: block;margin-top: -1px;height: 0px !important;"><svg xmlns="http://www.w3.org/2000/svg"      opacity="0" height="100%" width="100%" data-filename="03_04.jpg"      style="display: flex;background-image: url(&quot;https://pic.downk.cc/item/5f3aa19f14195aa594b301e3.gif&quot;);background-color: #000000;background-size: 100% auto;background-repeat: no-repeat;padding-top: 50%;width: 100%;transform: rotateZ(0.00deg);-webkit-transform: rotateZ(0.00deg);-moz-transform: rotateZ(0.00deg);-o-transform: rotateZ(0.00deg);-webkit-transform: rotateZ(0.00deg);-moz-transform: rotateZ(0.00deg);-o-transform: rotateZ(0.00deg);">      <animate attributeName="opacity" restart="whenNotActive" begin="click" dur="3s" keyTimes="0; 0.01; 0.70; 1"        values="0; 1; 1; 0;"></animate>    </svg></div>  <div data-filename="02_04.jpg"    style="display: block;background-image: url(&quot;https://pic.downk.cc/item/5f3aa2de14195aa594b34bb0.png&quot;);background-color: rgb(0, 0, 0);background-size: 100%;background-repeat: no-repeat;padding-top: 50%;width: 100%;margin-top: -1px;">  </div>  <div style="display: block;height: 0px !important;"><svg data-filename="03_05.jpg" height="100%" opacity="0"      style="display: flex;background-image: url(&quot;https://pic.downk.cc/item/5f3aa1dd14195aa594b30fe1.gif&quot;);background-color: #000000;background-size: 100% auto;background-repeat: no-repeat;padding-top: 50%;width: 100%;transform: rotateZ(0.00deg);-webkit-transform: rotateZ(0.00deg);-moz-transform: rotateZ(0.00deg);-o-transform: rotateZ(0.00deg);-webkit-transform: rotateZ(0.00deg);-moz-transform: rotateZ(0.00deg);-o-transform: rotateZ(0.00deg);"      width="100%" xmlns="http://www.w3.org/2000/svg">      <animate attributeName="opacity" restart="whenNotActive" begin="click" dur="7s" keyTimes="0; 0.01; 0.70; 1"        values="0; 1; 1; 0;"></animate>    </svg></div>  <div data-filename="02_05.jpg"    style="display: block;background-image: url(&quot;https://pic.downk.cc/item/5f3aa17114195aa594b2f70d.png&quot;);background-color: rgb(0, 0, 0);background-size: 100%;background-repeat: no-repeat;padding-top: 50%;width: 100%;">  </div></section><h2 id="总结">总结</h2><ol><li>微信公众号的编辑器是不支持直接修改文章 HTML 的，要用Chrome Inspect进行调试贴上代码</li><li>另外微信公众平台的编辑器也有很多“潜规则”，很多css的属性都可能作废。有人总结了一下-&gt;<a href="https://www.cnblogs.com/haqiao/p/13438686.html" target="_blank" rel="noopener">发SVG文的一些坑</a>,以后可以作为参考，另外这篇文章也不错-&gt;<a href="https://www.jianshu.com/p/8c2e4fc26e8a" target="_blank" rel="noopener">详细教你微信公众号正文页SVG交互开发</a>。</li><li>考虑一下要不要捡起我的公众号吧。可以先关注一波，微信搜索： 麻麻哋阿巴阿巴。</li><li>可以微信搜索 东泽聊技术,看牛人的技术操作这篇文章 也写的相当不错-&gt;<a href="https://mp.weixin.qq.com/s/GPJ2TjgIdA-XG5rNWVCXZQ" target="_blank" rel="noopener">程序员就该这样解读《隐秘的角落》</a></li></ol>]]></content>
    
    
    <summary type="html">练习</summary>
    
    
    
    <category term="SVG" scheme="https://tanxy.club/categories/SVG/"/>
    
    
    <category term="Flex-Layout" scheme="https://tanxy.club/tags/Flex-Layout/"/>
    
    <category term="SVG" scheme="https://tanxy.club/tags/SVG/"/>
    
    <category term="微信公众号" scheme="https://tanxy.club/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>“幸运之子会是谁呢”</title>
    <link href="https://tanxy.club/ckici5lbx0005istv2danekgf/"/>
    <id>https://tanxy.club/ckici5lbx0005istv2danekgf/</id>
    <published>2020-08-15T12:48:22.000Z</published>
    <updated>2020-11-23T11:56:06.098Z</updated>
    
    <content type="html"><![CDATA[<p>一款有趣的“抽奖”工具</p><a id="more"></a><h2 id="前言">前言</h2><p>今日分享的是一个偶然在少数派上面看到的一个软件：LuckyYou，这款软件的作者是 <a href="https://github.com/jwenjian" target="_blank" rel="noopener">jwenjian</a>,我是被作者对这款软件的描述吸引的：</p><p><img src="https://cdn.jsdelivr.net/gh/Tan35/ImgHosting/Tan35-PIC/Snipaste_2020-11-22_17-08-14.jpg" alt=""></p><p>而对于这款软件的实际意义来说简单四个字：随机抽取（<s>废话</s>）</p><ul><li>班级上的点名，无论是随机点到还是随机&quot;抽奖&quot;</li><li>幸运观众的抽取</li></ul><h2 id="优势">优势</h2><p>在这个花名册逐渐电子化的时代，“抽奖工具”的出现似乎是必不可少了，那么这款软件最大的优势是什么呢？  <strong>强（hao）大（kan）</strong>  。</p><h2 id="下载安装">下载安装</h2><p>代码是开源的。链接🔗： <a href="https://github.com/jwenjian/lucky-you/releases" target="_blank" rel="noopener">Download</a><br><img src="https://cdn.jsdelivr.net/gh/Tan35/ImgHosting/Tan35-PIC/3.jpg" alt=""><br>不同系统选择不同的安装包下载即可</p><blockquote><p><strong>注</strong>：</p></blockquote><table><thead><tr><th style="text-align:center">系统说明</th><th style="text-align:center">安装包后缀名</th></tr></thead><tbody><tr><td style="text-align:center">Windows</td><td style="text-align:center">.msi</td></tr><tr><td style="text-align:center">Ubuntu</td><td style="text-align:center">.deb</td></tr><tr><td style="text-align:center">Macos</td><td style="text-align:center">.dmg</td></tr></tbody></table><hr><h2 id="使用步骤">使用步骤</h2><p><img src="https://pic.downk.cc/item/5f37b0fe14195aa594fe21cd.jpg" alt="主界面"></p><hr><h3 id="事前准备">事前准备</h3><p>你要准备好抽取对象的照片和名字，照片最后会被软件裁切为正方形，毕竟本意也是个“电子花名册”，下面以抽取三个人（张三，李四，欧阳六）为例子进行展示</p><h3 id="开始！">开始！</h3><p>按下软件主界面中间的<code>Select images(选择图片)</code>即可进行抽取对象的选择，然后按开始便可以享受抽取的快乐<br><img src="https://pic.downk.cc/item/5f37bb7114195aa594013581.gif" alt=""></p><h3 id="软件小tips">软件小tips</h3><ul><li>软件设计默认为英文，右上角<strong>第二个</strong>按钮可进行语言的切换，可切换到简体中文</li><li>软件支持深色模式，右上角<strong>第五个</strong>按钮可实现浅色模式与深色模式的切换</li><li>声音是老虎机的声音，比较有趣，右上角<strong>第一个</strong>按钮可进行声音开关操作</li><li>选取的图片格式可以是：.jpg,.jpeg,.png,.gif（.ico也可以!）</li><li>选取的图片不宜过大，并不是不能过大，测试过7M的照片还是可以的，至于作者所说的不宜过大应该是在抽取过程中，如果图片过大会使得图片动画过渡不自然，最终抽取效果不佳</li><li>选取的照片张数作者并没有说，不过测试过50张也是没有问题的</li><li>当然你也可以请作者喝杯咖啡，选择右上角<strong>第四个</strong>按钮</li></ul><h3 id="第三个按钮呢？">第三个按钮呢？</h3><p>软件<strong>第三个</strong>按钮为设置抽取的规则</p><p><img src="https://cdn.jsdelivr.net/gh/Tan35/ImgHosting/Tan35-PIC/Snipaste_2020-11-22_17-12-45.jpg" alt=""></p><p>这个规则直白点说就是：<strong>上面的例子中，张三/李四/欧阳六是否可以被重复抽中多次</strong>。然而更让我意想不到的是（<s>愚钝的我</s>）,在选择否之后，软件在抽取一个对象之后，会将此抽中对象从抽取列表中删除，然后进行列表中剩余对象的抽取。（我本以为这个规则的意思是在多次抽取的过程中，同一个对象是否能被多此抽中）如图，我在选择否之后再次进行抽奖。</p><p><img src="https://pic.downk.cc/item/5f37c01914195aa594028f43.gif" alt=""></p><p>可看到被抽中的对象一个个从抽奖列表中删除，直到最后剩下张三不再进行抽奖。<br>其实不难理解，我觉得这也应该是定下这个规则之后的抽奖逻辑，当然选择否之后不从列表删除抽中对象这个逻辑也是没有问题的。</p><h2 id="最后">最后</h2><p>在写下这篇博客的时候，作者对于此应用在Windows下的适配还没有完全解决好，Windows系统安装完之后还是不能正常使用，只能通过作者提供的方法使用<a href="https://luckyyou.netlify.app/" target="_blank" rel="noopener">PWA应用</a>。我也算是和这位作者有点缘份，作者在少数派发表文章之后我就发现了问题并求教作者，给作者提供Windows下LuckyYou不能运行的具体问题，在交流之中可以看出是一位比较负责的作者了。最后希望Windows系统下的LuckyYou可以尽快修复bug，毕竟这软件真不错，无论是界面、UI还是主要功能，当然也希望作者可以加入更多额外功能，比如某网友说的从 Excel 导入学号姓名作为“抽奖”的另一种方法，也可以制定更多抽奖的规则。</p><p><img src="https://pic.downk.cc/item/5fba2cfcb18d6271139caaaf.jpg" alt=""><br><img src="https://pic.downk.cc/item/5fba2cfcb18d6271139caab6.jpg" alt=""></p>]]></content>
    
    
    <summary type="html">一款有趣的“抽奖”工具</summary>
    
    
    
    <category term="一些软件" scheme="https://tanxy.club/categories/%E4%B8%80%E4%BA%9B%E8%BD%AF%E4%BB%B6/"/>
    
    
    <category term="VUE" scheme="https://tanxy.club/tags/VUE/"/>
    
    <category term="抽奖" scheme="https://tanxy.club/tags/%E6%8A%BD%E5%A5%96/"/>
    
    <category term="LuckyYou" scheme="https://tanxy.club/tags/LuckyYou/"/>
    
    <category term="软件" scheme="https://tanxy.club/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>SQlite3 &amp; Navicat premium15 初步认识与使用</title>
    <link href="https://tanxy.club/ckici5lcc000mistvc9vt7cyo/"/>
    <id>https://tanxy.club/ckici5lcc000mistvc9vt7cyo/</id>
    <published>2020-06-04T09:36:34.000Z</published>
    <updated>2020-11-23T15:58:13.847Z</updated>
    
    <content type="html"><![CDATA[<h1>SQlite3安装教程与初步使用 &amp;&amp; navicat premium15</h1><blockquote><ol><li>什么是sqlite？SQLite是一个小型的C程序库，实现了独立的，可嵌入的，零配置的SQL数据库引擎</li><li>什么是navicat premium，很多小白常常误解navicat也是数据库软件。我在知乎上看到这么一个问题:<br><strong>Q:“navicat premium那么好用为什么还要学习mysql?”</strong>,<u>有个网友回答的非常巧妙</u><br><strong>A:&quot;你这个问题大概相当于 有个水龙头就可以接水了干嘛还要自来水供水系统 &quot;</strong></li></ol></blockquote><ul><li>是的，自来水供水系统(mysql)来管理控制水(数据)，有很多种接水方法，水龙头(navicat)也可以是其中一种。</li><li>navicat系列软件只是用来<strong>管理这些数据库的图形化的数据库管理工具</strong>,当然你也可以直接去供水系统去接水。</li><li>而这个自来水供水系统有很多就是我们常见的数据库软件(oracle mysql sqlite…)</li></ul><h2 id="为什么选择sqlite">为什么选择sqlite?</h2><ol><li><strong>优点</strong><ul><li><strong>不麻烦</strong>：<strong>极其</strong>轻量，无需进行管理和配置，下载就可以用，占用内存几百K–&gt;单文件数据库</li><li><strong>不鸡肋</strong>：支持完整的<code>SQL</code>功能，能够处理TB级的数据</li></ul><ul><li><strong>够广</strong>：SQLite 号称是部署和使用最广泛的数据库引擎，因为sqlite没有版权的限制，只要你想用就用</li></ul><ul><li><strong>很和谐</strong>：兼容性高，可以非常方便的以多种形式嵌入到其他应用程序中，如静态库、动态库等</li></ul></li><li><strong>缺点</strong><ul><li><strong>不能大量&quot;写我&quot;</strong>：SQLite适合于高查询、低写入类型地网站，如果一个网站有非常多地写操作，那SQLite就不再适合它。虽然sqlite支持无限数量的同时读取，可是在任何时候都只允许一个写入，虽然可以排队，但是无法应对<strong>高并发</strong>的要求</li></ul><ul><li><strong>不能超级大</strong>：你说嗯？不鸡肋？当然这里我是相对来说，官网称最大支持140TB，(够用了吧)，当然还是有些大型数据集会超过，就不能用sqlite</li></ul></li></ol><hr><h2 id="引言">引言</h2><p>SQlite官网有这么一句话：</p><p>「SQLite is not directly comparable to client/server SQL database engines such as MySQL, Oracle, or SQL Server since SQLite is trying to solve a different problem」</p><blockquote><p>这句话大概意思就是SQlite的出现不是为了和 <code>MySQL</code>, <code>Oracle</code>, <code>SQL Server</code>等竞争的，是为了 <mark>解决问题的</mark></p></blockquote><hr><h2 id="主题1：SQlite3下载安装与使用">主题1：SQlite3下载安装与使用</h2><h3 id="下载SQlite方式"><strong>下载SQlite方式</strong></h3><table><thead><tr><th style="text-align:center">下载方式</th><th style="text-align:center">取件码</th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://www.sqlite.org/download.html" target="_blank" rel="noopener" title="还不点进去！">SQlite官网</a></td><td style="text-align:center">无</td></tr><tr><td style="text-align:center"><s><a href="https://c-t.work/s/05cea01ce5e442" target="_blank" rel="noopener" title="不舍得点吗？！">奶牛快传</a></s></td><td style="text-align:center"><s>kyt8zz</s></td></tr><tr><td style="text-align:center"><a href="https://pan.baidu.com/s/1AqBfp8lvDiEWlYu-V_uyvw" target="_blank" rel="noopener" title="不舍得点吗？！">百度网盘</a></td><td style="text-align:center">bxpb</td></tr><tr><td style="text-align:center"><a href="https://wws.lanzous.com/icGpDe7hr4j" target="_blank" rel="noopener" title="不舍得点吗！">蓝奏云</a></td><td style="text-align:center">无</td></tr></tbody></table><blockquote><p><strong>关于下载：奶牛快传已失效</strong><br>注:提供的下载都是基于 win10 64位和32位版本</p></blockquote><hr><h3 id="下载安装步骤"><strong>下载安装步骤</strong></h3><p><strong>1. 下载方式1(官网)</strong></p><p><img src="https://pic.downk.cc/item/5f02f5e014195aa594f4bf1d.png" alt="官网下载文件具体图"></p><p><strong>2. 下载方式2(网盘)</strong></p><p><img src="https://pic.downk.cc/item/5f02f33e14195aa594f392ce.png" alt="从网盘后下载后图"></p><blockquote><p>注：关于图中或者压缩包里的文件说明一下，文件名有tools的是工具（即图中标3）压缩包。1，2是动态链接库文件，鉴于博主好奇的天性加上参考其他博主的操作发现，没有1，2好像也没问题，只要有tools就行，所以下不下载都可以。</p></blockquote><hr><p><strong>3. 安装</strong></p><ol><li>这个是下载下来的压缩包,全部解压完整理后就是如图</li><li>解压 tool压缩包 之后，又是一个文件夹把里面的东西移出来和解压的32位/64位的文件放在一起。</li></ol><p><img src="https://pic.downk.cc/item/5f02f35f14195aa594f3a1ed.png" alt="最终文件夹文件显示图"></p><hr><h3 id="安装结束">安装结束</h3><p>到此为止,你已经得到了一个sqlite3,是的,可以用了。打开<code>sqlite3.exe</code>就可以创建数据库等操作。</p><hr><h3 id="配置环境变量"><strong>配置环境变量</strong></h3><blockquote><p>不过用之前为了方便使用sqlite3，即命令行(cmd)中直接操作,可以在系统环境变量中添加sqlite3。下面是具体操作步骤。</p></blockquote><p><img src="https://pic.downk.cc/item/5f02f39014195aa594f3b54e.png" alt="第一步"><br><img src="https://pic.downk.cc/item/5f02f3b414195aa594f3c44e.png" alt="第二步"><br><img src="https://pic.downk.cc/item/5f02f40014195aa594f3e860.png" alt="第三步"><br><img src="https://pic.downk.cc/item/5f02f42014195aa594f3f48a.png" alt="第四步"><br><img src="https://pic.downk.cc/item/5f02f43214195aa594f3fc17.png" alt="第五步"></p><hr><h3 id="开始操作"><strong>开始操作</strong></h3><p>接下来就开始操作了，不过<code>sqlite</code>语法还是和<code>sql server</code> 语法有一些不同,具体可以看看教程，这里推荐一个比较基础的教程：<a href="https://www.runoob.com/sqlite/sqlite-tutorial.html" target="_blank" rel="noopener" title="不会还不点进去？">菜鸟教程</a></p><p><strong>1. 检查</strong><br>检查一下sqlite3是不是已经成功在你电脑上并且能从命令行中直接打开。<br>Ctrl + R输入cmd 打开命令行执行 <code>sqlite3</code> ,如果是下面的图 ，恭喜你，你已经可以在命令行中唤醒sqlite了。</p><p><img src="https://pic.downk.cc/item/5f02f46a14195aa594f41356.png" alt="操作成功图"></p><p><strong>2. 创建数据库</strong></p><ul><li>我以创建一个在d盘目录下的一个名字为mykey.db的数据库作为例子吧。</li><li>按照你们自己想创建的目录下面试着创建一个自己的数据库文件吧。创建操作示例如图</li></ul><p><img src="https://pic.downk.cc/item/5f02f48e14195aa594f424a8.png" alt="创建过程图"><br><img src="https://pic.downk.cc/item/5f02f4be14195aa594f43968.png" alt="查看数据库文件所在文件夹图"></p><hr><h3 id="sqlite3总结"><strong>sqlite3总结</strong></h3><ul><li>那么关于sqlite3的安装与基本操作就到这里，具体操作自行搜索。推荐一篇文章，里面有sqlite3具体操作，<a href="https://blog.csdn.net/nan_lei/article/details/84344003" target="_blank" rel="noopener">链接文章</a>。</li><li>我所认为的SQlite意义并不在于其本身，而是其兼容性广，意义在于在多种嵌入式设备中都能使用，并且单个文件的数据库实在是太便携了，你可以用python、java、c语言来连接SQlite实现更多的功能</li></ul><hr><h2 id="主题2：navicat-premium15-navicat与SQlite的初步连接">主题2：navicat premium15 &amp;&amp; navicat与SQlite的初步连接</h2><p>再次明确一点，「navicat 不是一个数据库软件，具体来说是个管理数据库软件。」另外本文章使用的Navicat的通用版：Navicat Premium。</p><p><img src="https://pic.downk.cc/item/5f02de0c14195aa594ebd15b.jpg" alt="Navicat Premium 支持连接的数据库"></p><h3 id="下载安装使用"><strong>下载安装使用</strong></h3><p><strong>1. 下载</strong></p><ul><li>官网下载</li><li>我的分享</li></ul><table><thead><tr><th style="text-align:center">下载方式</th><th style="text-align:center">取件码</th></tr></thead><tbody><tr><td style="text-align:center"><s><a href="https://c-t.work/s/0794e6f5470a45" target="_blank" rel="noopener" title="不舍得点吗？！">奶牛快传</a></s></td><td style="text-align:center"><s>5mt77y</s></td></tr><tr><td style="text-align:center"><a href="https://pan.baidu.com/s/1Xp40GTRUJNNwU6Al9UH9Ag" target="_blank" rel="noopener" title="不舍得点吗？！">百度网盘</a></td><td style="text-align:center">eovh</td></tr><tr><td style="text-align:center"><a href="https://wws.lanzous.com/i3IlHe7lhkj" target="_blank" rel="noopener" title="不舍得点吗！">蓝奏云</a></td><td style="text-align:center">无</td></tr></tbody></table><hr><p><strong>2. PoJie(支持正版)</strong></p><blockquote><p>pojie 步骤<a href="https://www.cnblogs.com/zenglintao/p/12823285.html" target="_blank" rel="noopener" title="支持正版">悄悄点进来吧</a></p></blockquote><hr><p><strong>3. 实际操作</strong></p><ul><li><s><strong>页面欣赏</strong></s></li></ul><p><img src="https://pic.downk.cc/item/5f02f4e314195aa594f4498d.png" alt="高大上&amp;简约风的navicat界面"></p><hr><ul><li><strong>连接SQlite</strong></li></ul><blockquote><p>我们以刚才我们创建的 mykey.db 作为例子 去连接这个数据库</p></blockquote><p><img src="https://pic.downk.cc/item/5f02f4ff14195aa594f4596a.png" alt="第一步选择连接sqlite数据库"><br><img src="https://pic.downk.cc/item/5f02f51b14195aa594f4655b.png" alt="第二步填写创建的.db文件所在路径，填写连接名字"><br><img src="https://pic.downk.cc/item/5f02f53e14195aa594f47543.png" alt="第三步检查连接"><br><img src="https://pic.downk.cc/item/5f02f55a14195aa594f48163.png" alt="第四步打开连接"><br><img src="https://pic.downk.cc/item/5f02f57714195aa594f48de6.png" alt="第五步检查连接"><br><img src="https://pic.downk.cc/item/5f02f59714195aa594f49b75.png" alt="进入创建的数据库"><br><img src="https://pic.downk.cc/item/5f02f5b614195aa594f4aa58.png" alt="查看内容"></p><h3 id="Navicat总结">Navicat总结</h3><ul><li>Navicat的作用就是让我们管理数据库的时候更加方便，更加直观的看到我们要做什么。</li><li>这里只是这两部分知识的皮毛，更多的知识需要我们去探索，加油吧。</li></ul>]]></content>
    
    
    <summary type="html">SQLite 是在世界上最广泛部署的 SQL 数据库引擎;SQLite 源代码不受版权限制。</summary>
    
    
    
    <category term="一些软件" scheme="https://tanxy.club/categories/%E4%B8%80%E4%BA%9B%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="SQlite3" scheme="https://tanxy.club/categories/SQlite3/"/>
    
    <category term="Navicat" scheme="https://tanxy.club/categories/Navicat/"/>
    
    
    <category term="SQlite3" scheme="https://tanxy.club/tags/SQlite3/"/>
    
    <category term="Navicat-Premium-15" scheme="https://tanxy.club/tags/Navicat-Premium-15/"/>
    
    <category term="数据库" scheme="https://tanxy.club/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="sql" scheme="https://tanxy.club/tags/sql/"/>
    
    <category term="SQLite语法" scheme="https://tanxy.club/tags/SQLite%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>「python」- 函数</title>
    <link href="https://tanxy.club/ckici5lc5000distvdn6zam7f/"/>
    <id>https://tanxy.club/ckici5lc5000distvdn6zam7f/</id>
    <published>2020-03-01T08:25:34.000Z</published>
    <updated>2020-11-23T15:48:55.249Z</updated>
    
    <content type="html"><![CDATA[<h1>python之函数</h1><p>什么是函数？函数是一段可常用的代码，为了日后可以经常性的去调用。python自身有很多内置函数，比如说<code>input()</code>,<code>print()</code>,我们也可以自己去定义函数。</p><h2 id="创建函数">创建函数</h2><p>python中，<code>def</code>关键字用来声明函数。函数的格式是：</p><p>def 函数名(参数1，参数2…参数n):<br>函数中的语句</p><br><ul><li>例子1：</li></ul><h2 id="￼0"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nothing</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></h2><p>我创建了一个叫<code>nothing</code>的函数，<code>nothing()</code>中我没有设置参数，语句是一个<code>pass</code>，<code>pass</code>并不是只能用于函数中，<code>if</code>语句中用<code>pass</code>也可以，相当于空。按照中文意思来说就是我过了，给系统表达你不用理我，但我是合法的意思，而实际操作意义是，我只是想用一个<code>pass</code>来暂时创建这个函数的基本骨架，让系统先不要报错，回过头来我再完善语句。</p><ul><li>例子2：</li></ul><h2 id="￼1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">average_pn</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    result = (a + b)/<span class="number">2</span></span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line">average_pn(<span class="number">2</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure></h2><p>结果是3。<br>这里我定义了一个叫<code>average_pn</code>求正数平均数的函数，我还设置了两个参数，这两个参数是抽象意义来说的，那么我这个函数的算法是两个数相加除以2，最后打印出来。调用<code>average_pn()</code>函数后，写入具体数据实现函数的功能。<br>上面的这个函数中，结果直接打印出来，但是在实际意义上来讲，我们希望他是返回一个值，然后我们给返回的值进行变量的赋值，继续完成我们程序下面的操作，所以说直接<code>print</code>实际操纵意义不大，更应该是返回一个值，而对于返回值下面又会继续用代码来说明。</p><h2 id="返回值return">返回值return</h2><blockquote><p>用于将函数的结果返回出来</p></blockquote><ol><li>函数可以没有返回值，那么其实就相当于返回了<code>None</code></li><li>当return执行时，函数会不留情面的立刻结束</li></ol><ul><li>例子：</li></ul><h2 id="￼2"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">average_pn</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> a == b:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">elif</span>  a&lt;<span class="number">0</span> <span class="keyword">or</span> b&lt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result = (a+b)/<span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">avg = int(average_pn(<span class="number">1</span>,<span class="number">13</span>))</span><br><span class="line">print(avg)</span><br></pre></td></tr></table></figure></h2><p>结果是7。<br>注：这里解释一下为什么我要int转换类型，因为在python3中/除出来就算是整数也是会个小数。<a href="https://blog.csdn.net/weixin_40485502/article/details/82832450" target="_blank" rel="noopener">为什么？</a><br>这里我定义了一个只能求正数平均数的函数<code>average_pn(a,b)</code>,并设置了两个参数。当判断a等于b的时候，就不需要进行计算，返回a即可；当发现a小于0或b小于0的时候，即不合法的输入的时候，直接返回<code>None</code>，其他则是有效结果进行相加求平均数。</p><p>注：<br>有三种情况会返回None</p><ol><li>没有return（就是没写return）</li><li>return为空(就是只写return)</li><li>第三种就是return None</li></ol><h2 id="全局变量和局部变量">全局变量和局部变量</h2><p>全局变量：函数外面的变量，在任何地方都可以访问的变量。<br>局部变量：函数里面的变量，只能放在函数内部使用。</p><ul><li>例子1：</li></ul><h2 id="￼3"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">12</span>                             <span class="comment">#全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    b = <span class="number">5</span>                          <span class="comment">#局部变量</span></span><br><span class="line"></span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line"></span><br><span class="line">show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#12</span></span><br><span class="line"><span class="comment">#5</span></span><br></pre></td></tr></table></figure></h2><p>因为调用了上面函数的时候，函数里面定义b，打印b，并且打印了全局变量a</p><ul><li>例子2，同样是上面的<code>show()</code>函数，直接打印a，b。</li></ul><h2 id="￼4"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(a) </span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure></h2><p>a能正常打印出来等于12，但直接打印b会报错，可以理解为在主函数中用不了你这个局部变量，会提示b未定义。也可以这么通俗的理解，a就是公共卫生间，b是你家里的卫生间，如果有个你不认识的人去用你家里的卫生间，你肯定也会报警；但是你家里的人去公共卫生间那么不会报警。</p><h2 id="同名变量的遮蔽">同名变量的遮蔽</h2><p>当全局变量和局部变量同名时，会优先使用局部变量,可以理解为“就近原则”。</p><ul><li>例子</li></ul><h2 id="￼5"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">12</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">5</span></span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line">show()   <span class="comment">#结果是5</span></span><br><span class="line">print(a)  <span class="comment">#结果是12</span></span><br></pre></td></tr></table></figure></h2><p>这里调用函数的时候，函数中<code>print(a)</code>,这个a是优先使用局部变量的a。这里有个很重要的点，不要理解为函数中a = 5是为全局变量赋值为5了，因为下面那一句print(a)结果还是12，只是函数中就近原则使用了局部变量，换句话来说就是在本地产生了一个新的a，上面全局变量我没动你(这也是python不用声明的一个小&quot;bug&quot;吧）。</p><p>而如果你真想对全局变量赋值，而不是产生一个新的a，可以用global关键字，下面看代码演示</p><ul><li>例子1：</li></ul><h2 id="￼6"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">12</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> a </span><br><span class="line">    </span><br><span class="line">    a = <span class="number">5</span></span><br><span class="line">    print(a)</span><br><span class="line">    print(id(a)) </span><br><span class="line"></span><br><span class="line">show()</span><br><span class="line">print(a)</span><br><span class="line">print(id(a))</span><br></pre></td></tr></table></figure></h2><p>结果是两个都是5，两个都是一样的id，证明只是修改了全局变量，并不是产生了一个新的a，这两个a是一样的。</p><ul><li>例子2：当然你也可以通过global关键字在函数里面创造全局变量</li></ul><h2 id="￼7"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    a = <span class="number">5</span></span><br><span class="line">    </span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></h2><p>结果是5，这里直接上函数，在函数里面定义了一个全局变量a，告诉系统我创建的就是一个全局变量a，那么最后自然也能打印出来。</p><h3 id="小总结：global关键字是对全局变量的一种保护。">小总结：global关键字是对全局变量的一种保护。</h3><ol><li>其实写程序要尽可能少的去使用全局变量，不然会容易起冲突，会容易互相污染，而<code>global</code>存在的意义则是要保护这么个全局变量，防止有人不知道他所定义的这个变量是全局变量从而去修改了他。当你用<code>global</code>关键字的时候就是提醒系统我知道我在操作全局变量这件事，你不用管我，我知道我自己在干什么</li><li>再啰嗦一句，精辟一句，<code>global</code>的实际存在意义是为了在多人协作项目中防止&quot;天下大乱&quot;。</li></ol><hr><h2 id="参数">参数</h2><p>「参数用于向函数内部传递数据」</p><h3 id="默认参数">默认参数</h3><ul><li>例子</li></ul><h2 id="￼8"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(a,b = <span class="number">100</span>)</span>:</span></span><br><span class="line">    print(a,b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show(<span class="number">1</span>,<span class="number">5</span>)   <span class="comment">#1,5</span></span><br><span class="line">show(<span class="number">1</span>)     <span class="comment">#1,100</span></span><br><span class="line">show()      <span class="comment">#报错</span></span><br></pre></td></tr></table></figure></h2><p>这里我创建了一个叫<code>show()</code>的函数，设置了两个参数：a，b。a的值没有给出默认由操作者写入数据，b的值给出了默认等于100。什么意思呢？当使用这个函数的时候：</p><ol><li>a的值你一定要给我，b的值你可以不给我。</li><li>b的值你不给我，我就用我默认的值100执行<code>print()</code>。</li></ol><p>也就是说你去这个<code>show</code>餐厅点餐，要求点两个菜，有一个菜a你是必须要自己点的，菜b我可以帮你点，你不点我就帮点了这个，当然你也可以自己点，我会优先遵从你的点法。默认参数虽然好，可是也要注意一下以下的事情。</p><ul><li>例子：</li></ul><h2 id="￼9"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(a=<span class="number">10</span>,b)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(a,b)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">show</span><span class="params">(<span class="number">12</span>)</span></span></span><br></pre></td></tr></table></figure></h2><p>报错：<code>non-default argument follows default argument</code>。<br>注意a的位置，a是在b的前面的，a设置了默认值，虽然设置了默认值，可是当我传一个参数的时候，系统就会摸棱两可，自我挣扎，你这是传给a，还是传给b呢，我知道你可能想传给b，可是a在b的前面，你这样传我很难做。然后就报错了。</p><p>所以：如果你有一个参数是可选的（也就是默认的），那么他后面的参数也必须是可选的（必须是默认的），如果不是就会报错。</p><h3 id="关键字参数">关键字参数</h3><p>python中提供了两种传参的方式：位置参数(positional arguments)和关键字参数(keyword arguments)。</p><ol><li>位置参数：最普遍的传参方式，与绝大部分语言的参数类似，以先后顺序为准则</li><li>关键字参数：较为少见的传参方式，与某些语言的命名参数或<code>hash</code>参数类似，用参数的名称直接访问</li></ol><p>例子:</p><h2 id="￼10"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(a,b,c)</span>:</span></span><br><span class="line">    print(a,b,c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show(<span class="number">12</span>,<span class="number">2</span>,<span class="number">6</span>)   <span class="comment">#位置参数---最普通的参数-----12，2，6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#关键字参数---用名字访问</span></span><br><span class="line">show(a=<span class="number">12</span>,b=<span class="number">5</span>,c=<span class="number">8</span>)       <span class="comment">#12,5,8</span></span><br><span class="line">show(b=<span class="number">12</span>,a=<span class="number">5</span>,c=<span class="number">8</span>)       <span class="comment">#5,12,8</span></span><br><span class="line">show(c=<span class="number">12</span>,b=<span class="number">5</span>,a=<span class="number">8</span>)       <span class="comment">#8,5,12</span></span><br></pre></td></tr></table></figure></h2><p>由上面这三行用关键字参数传参的代码可看出，当你用关键字参数传值的时候，顺序已经不再重要了，因为你已经指定了谁是多少，顺序已经不是条件。</p><h3 id="混合使用位置参数和关键字参数">混合使用位置参数和关键字参数</h3><p>你可以这么用但是，关键字参数必须在所有位置参数的后面。</p><ul><li>例子1：</li></ul><h2 id="￼11"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(a,b,c)</span>:</span></span><br><span class="line">    print(a,b,c)</span><br><span class="line"></span><br><span class="line">show(<span class="number">12</span>,<span class="number">5</span>,c = <span class="number">8</span>)        <span class="comment">#12,5,8</span></span><br><span class="line">show(<span class="number">12</span>,c = <span class="number">8</span>,b = <span class="number">5</span>)    <span class="comment">#12,5,8</span></span><br></pre></td></tr></table></figure></h2><p>先来看看上面这两行代码,要么你就按顺序来，然后最后指定c等于多少，要么也是同样性质，按顺序来，然后指定b是多少，c是多少。</p><ul><li>例子2：一样是上面的<code>show()</code>函数</li></ul><h2 id="￼12"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show(<span class="number">12</span>,<span class="number">5</span>,b=<span class="number">8</span>)</span><br><span class="line">show(<span class="number">12</span>,b=<span class="number">8</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure></h2><p>这两行代码也会报错，第一行代码报错：<code>TypeError: show() got multiple values for argument 'b'</code>，意思是b重复赋值了。你这样写你代表前面按顺序来了分别指定a = 12，b=5，最后竟然又指定b=8，不可以。<br>第二行代码报错<code>SyntaxError: positional argument follows keyword argument</code>，字面上来说就是你的这个位置参数不能跟在关键字参数后面，所以你如果要混合使用位置参数和关键字参数，可以，<br>但是关键字参数必须在<u>所有</u>位置参数的后面。</p><h2 id="在函数中返回多个值">在函数中返回多个值</h2><p>在python中，函数同时return多个结果，只需要用<code>,</code>(逗号)隔开就行，多个参数会以元组的形式返回。值得注意的是在其他语言当中，一般情况下，函数返回只能返回一个值。</p><ul><li>例子1：</li></ul><h2 id="￼13"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">12</span>,<span class="number">5</span></span><br><span class="line">s = show()</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">#(12,5)</span></span><br></pre></td></tr></table></figure></h2><p>这是一个元组(tuple)。</p><ul><li>例子2：你也可以用结构赋值一起使用</li></ul><h2 id="￼14"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(a,b) = show()</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">#12</span></span><br><span class="line"><span class="comment">#5</span></span><br></pre></td></tr></table></figure></h2><ul><li>例子3：你也可以手动用tuple或者其他方式返回</li></ul><h2 id="￼15"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">12</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">(a,b) = show()</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">#12</span></span><br><span class="line"><span class="comment">#5</span></span><br></pre></td></tr></table></figure></h2><ul><li>例子4：列表 (list)形式</li></ul><h2 id="￼16"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="number">12</span>,<span class="number">5</span>]</span><br><span class="line"> [a,b] = show()</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">#12</span></span><br><span class="line"><span class="comment">#5</span></span><br></pre></td></tr></table></figure></h2><h3 id="小总结">小总结</h3><p>其实python他返回的值也只能是一个，只不过他语言自身为我们包装成了<code>tuple</code>形式，让我们可以返回多个值。</p><hr><h1>大总结</h1><ol><li><code>def</code>关键字创建函数，<code>pass</code>关键字为了搭建大的架构。</li><li>函数可以没有返回值，相当于返回<code>None</code>，当函数中return执行时，函数会立即结束；在任何地方都可以使用return，在if中等等等。</li><li>尽量减少全局变量的使用,<code>global</code>关键字存在是为了保护全局变量。</li><li>传参数的时候，用两种方式传参的时候，要注意<strong>关键字参数必须在所有位置参数的后面</strong>，注意这个<strong>所有</strong>。</li><li>函数返回多个值的技巧其实就是返回了一个<code>tuple(元组)</code>。</li></ol>]]></content>
    
    
    <summary type="html">python中函数有什么不同呢？怎么创建函数呢？</summary>
    
    
    
    <category term="python" scheme="https://tanxy.club/categories/python/"/>
    
    
    <category term="python基础" scheme="https://tanxy.club/tags/python%E5%9F%BA%E7%A1%80/"/>
    
    <category term="函数" scheme="https://tanxy.club/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>「python」- 流程控制语句</title>
    <link href="https://tanxy.club/ckici5lch000ristve2ap0o79/"/>
    <id>https://tanxy.club/ckici5lch000ristve2ap0o79/</id>
    <published>2020-02-22T07:12:25.000Z</published>
    <updated>2020-11-23T15:49:19.997Z</updated>
    
    <content type="html"><![CDATA[<h1>python流程控制语句</h1><blockquote><p>根据条件不同执行不同的代码是程序非常常见的也是非常重要的行为</p></blockquote><h2 id="布尔值">布尔值</h2><h3 id="回顾-关系运算符">回顾 - 关系运算符</h3><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">&gt;</td><td style="text-align:center">大于</td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:center">小于</td></tr><tr><td style="text-align:center">&gt;=</td><td style="text-align:center">大于等于</td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:center">小于等于</td></tr><tr><td style="text-align:center">==</td><td style="text-align:center">相等</td></tr><tr><td style="text-align:center">！=</td><td style="text-align:center">不等</td></tr></tbody></table><p>关系运算符最终得出的结果返回的就是布尔值(boolean)，而所谓的布尔值也就是<code>False</code>和<code>True</code>两个,比如说  <code>print(12&gt;5)# True</code>，<code>print(5&gt;12)# False</code>，<code>True</code> 和 <code>False</code> 是python里面的关键字（要么是真的要么是假的）。</p><p>if 语句就是依靠布尔值来工作的</p><h2 id="￼0"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 布尔值:</span><br><span class="line">    为<span class="literal">True</span>时执行的语句</span><br><span class="line"><span class="keyword">else</span> 布尔值:</span><br><span class="line">    为<span class="literal">False</span>时执行的语句</span><br></pre></td></tr></table></figure></h2><p>来看一下关于if的所有内容举例代码：</p><h2 id="￼1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">hungry = <span class="literal">True</span>              <span class="comment">#当我规定hungry为真的时候</span></span><br><span class="line">money = <span class="number">5</span>                  <span class="comment">#定义我现在只有五块钱</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> hungry:                <span class="comment">#当hungry为真的时候，这里开始运行</span></span><br><span class="line">    <span class="keyword">if</span> money &lt; <span class="number">5</span>:         <span class="comment">#if之后再if，if是可以嵌套的，当hungry为真，且money&lt;5的时候运行</span></span><br><span class="line">        print(<span class="string">'别吃了饿着吧'</span>)</span><br><span class="line">    <span class="keyword">elif</span> money &lt; <span class="number">10</span>:      <span class="comment">#当hungry为真，且money&gt;5 同时小于10的时候运行</span></span><br><span class="line">        print(<span class="string">'吃馒头'</span>)</span><br><span class="line">    <span class="keyword">elif</span> money &lt; <span class="number">20</span>:      <span class="comment">#当hungry为真，且money&gt;10 同时小于20的时候运行</span></span><br><span class="line">        print(<span class="string">'吃面'</span>)</span><br><span class="line">    <span class="keyword">elif</span> money &lt; <span class="number">30</span>:      <span class="comment">#当hungry为真，且money&gt;20 同时小于30的时候运行</span></span><br><span class="line">        print(<span class="string">'吃饭'</span>)</span><br><span class="line"><span class="keyword">else</span>：                    <span class="comment">#这个else 是对齐上面的大的if的，所以这里是hungry为假的时候运行</span></span><br><span class="line">    print(<span class="string">'接着工作'</span>)</span><br></pre></td></tr></table></figure></h2><h2 id="总结">总结</h2><ol><li>if语句是可以嵌套的，python中没有<code>switch</code></li><li>如果hungry为<code>False</code>就会执行下下面的&quot;接着工作&quot;。</li><li>为什么hungry为<code>False</code>就会执行下面的&quot;接着工作&quot;?if 和 else，所以再次强调python的<u>缩进很重要</u>，如果上面的<code>else</code> 和最上面的<code>if</code>缩进格数不一样(通俗来讲就是不对齐的话就会报错),而对于缩进的格数没有严格的规定，只要在你相同逻辑下的语句缩进相同格数就行。</li><li>python中<code>if</code>是必须的但是<code>else</code>不是必须的比如说</li></ol><h2 id="￼2"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> hungry == <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">'快去吃饭'</span>)</span><br></pre></td></tr></table></figure></h2>]]></content>
    
    
    <summary type="html">任何一个程序之所以称为程序，他总有一个逻辑在里面，流程控制语句就是来控制程序的流程</summary>
    
    
    
    <category term="python" scheme="https://tanxy.club/categories/python/"/>
    
    
    <category term="python基础" scheme="https://tanxy.club/tags/python%E5%9F%BA%E7%A1%80/"/>
    
    <category term="流程控制语句" scheme="https://tanxy.club/tags/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
    
    <category term="if语句" scheme="https://tanxy.club/tags/if%E8%AF%AD%E5%8F%A5/"/>
    
  </entry>
  
  <entry>
    <title>「python」- 数据类型转换</title>
    <link href="https://tanxy.club/ckici5ldq0030istv4966d2qo/"/>
    <id>https://tanxy.club/ckici5ldq0030istv4966d2qo/</id>
    <published>2020-02-21T10:24:34.000Z</published>
    <updated>2020-11-23T15:50:07.822Z</updated>
    
    <content type="html"><![CDATA[<h1>python之数据类型转换</h1><blockquote><p>直接用代码来说明</p></blockquote><h2 id="￼0"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'5.8'</span>                 <span class="comment">#定义一个字符串</span></span><br><span class="line">a = <span class="number">5</span>                     <span class="comment">#定义一个变量=5</span></span><br><span class="line">b = <span class="number">5.8</span></span><br><span class="line">print(float(s)+<span class="number">1.6</span>)       <span class="comment">#7.4   把字符串转换为浮点型之后与1.6相加得到 7.4</span></span><br><span class="line">print(float(a))          <span class="comment">#5.0   把整型变量转换为浮点型</span></span><br><span class="line">print(int(b))            <span class="comment">#5     把float类型转换为int类型--这里只是截取整数部分，并非四舍五入</span></span><br><span class="line">print(str(a)+s)          <span class="comment">#55.8  注意这里并非数值55.8，只是将5转换为字符串类型然后和5.8拼接</span></span><br><span class="line"></span><br><span class="line">print(round(<span class="number">3.5</span>))         <span class="comment">#4   这才是四舍五入</span></span><br><span class="line">print(round(<span class="number">3.2</span>))         <span class="comment">#3    四舍五入</span></span><br></pre></td></tr></table></figure></h2>]]></content>
    
    
    <summary type="html">各种数据类型之间都可以转换的</summary>
    
    
    
    <category term="python" scheme="https://tanxy.club/categories/python/"/>
    
    
    <category term="数据类型" scheme="https://tanxy.club/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
    <category term="python基础" scheme="https://tanxy.club/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>「python」- 元组(tuple)</title>
    <link href="https://tanxy.club/ckici5lc7000fistv0vwweoqq/"/>
    <id>https://tanxy.club/ckici5lc7000fistv0vwweoqq/</id>
    <published>2020-02-20T01:32:25.000Z</published>
    <updated>2020-11-23T15:50:44.780Z</updated>
    
    <content type="html"><![CDATA[<h1>python之–元组(tuple)</h1><p>元组其实和list几乎一模一样，只是<u>不能修改</u>。</p><h2 id="创建元组">创建元组</h2><ol><li>方法1：常用</li></ol><h2 id="￼0"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuple1 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure></h2><p>回忆一下：</p><ul><li>元组是  <code>()</code></li><li>列表是  <code>[]</code></li><li>字典是 <code>{}</code></li></ul><ol start="2"><li>方法2：构造器</li></ol><h2 id="￼1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t = tuple((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure></h2><h2 id="元组操作">元组操作</h2><p>和list共享所有操作，除了<u>修改</u>的操作。下面通过代码来说明：</p><h2 id="￼2"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)  <span class="comment">#定义一个元组</span></span><br><span class="line"></span><br><span class="line">print(t)                      <span class="comment">#(1,2,3) √</span></span><br><span class="line">print(t[<span class="number">0</span>])                   <span class="comment">#1 √</span></span><br><span class="line">t[<span class="number">0</span>] = <span class="number">12</span>                     <span class="comment">#报错 ×---！说了不能修改！</span></span><br><span class="line"><span class="keyword">del</span> t[<span class="number">0</span>]                      <span class="comment">#报错 ×---！说了不能修改！</span></span><br><span class="line">t.append(<span class="number">8</span>)                   <span class="comment">#报错 ×---！说了不能修改！</span></span><br><span class="line">t.pop()                       <span class="comment">#报错 ×---！说了不能修改！</span></span><br></pre></td></tr></table></figure></h2><p>综上，「增」「删」「改」通通都别想，只能<strong>查</strong>。</p><ul><li>例子： 「查」的操作</li></ul><h2 id="￼3"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> t:</span><br><span class="line">    print(i)</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment">#2</span></span><br><span class="line"><span class="comment">#3</span></span><br><span class="line"><span class="comment">#4 </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#没有增删改，循环输出而已</span></span><br></pre></td></tr></table></figure></h2><p>其他包括截取索引，<code>in</code>和<code>not in</code> ，<code>min</code>，<code>max</code>，<code>len</code>，<code>sum</code>都可以。</p><h2 id="总结：">总结：</h2><ol><li>元组(tuple)通俗来理解可以为一个「受到保护」的列表(list)。</li><li>元组的意义在哪？比如说 当一些东西长期以来不变的时候就应该用<code>tuple</code>，比如说中国的省份，不是说以后一定不会变化，只是在一定或较长时间内不会发生变化，那么用<code>tuple</code>更加合适。而实际意义中比如说，<u>在多人协作的一个项目之中，你确定有些部分的内容确实不用改，你可以写成一个<code>tuple</code>,就能防止有人不小心修改了<code>tuple</code>里面的内容，</u>万一将来真的有变化，那就直接从定义那里改，与其说是没意义，还不如说是一个<mark>谨慎的列表</mark>。</li></ol>]]></content>
    
    
    <summary type="html">元组本质上是一个受保护的list，他是静态的不能改。</summary>
    
    
    
    <category term="python" scheme="https://tanxy.club/categories/python/"/>
    
    
    <category term="python基础" scheme="https://tanxy.club/tags/python%E5%9F%BA%E7%A1%80/"/>
    
    <category term="元组" scheme="https://tanxy.club/tags/%E5%85%83%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>「python」- 字典</title>
    <link href="https://tanxy.club/ckici5lc20009istv3vcucl76/"/>
    <id>https://tanxy.club/ckici5lc20009istv3vcucl76/</id>
    <published>2019-08-13T02:28:25.000Z</published>
    <updated>2020-11-23T15:49:09.806Z</updated>
    
    <content type="html"><![CDATA[<h1>python学习笔记之字典</h1><ul><li>要唯一，最好是数字。</li><li>字典的作用：找东西。<code>key</code>很关键，要定好。</li><li>字典用于存储“键值对”，用于快速获取、添加、删除、修改某个值，类似于PHP的联合数组、Java的<code>HashMap</code>、JS的<code>json</code>，用户名-&gt;用户资料等等。</li><li>所有语言中的字典，都是基于Hash、二叉树或其他类似结构的一类无序数据结构，目的就是为了<u>增加数据访问的速度</u>。</li></ul><h2 id="创建字典">创建字典</h2><p>在Python中，有两种方式创建字典。</p><ol><li>方法1：直接写。</li></ol><h2 id="￼0"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"张三"</span>,</span><br><span class="line">    <span class="string">"age"</span> : <span class="number">35</span>,</span><br><span class="line">    <span class="string">"gender"</span>: <span class="string">"男"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(d[<span class="string">'gender'</span>])  <span class="comment">#男</span></span><br><span class="line">print(d[<span class="string">'age'</span>])  <span class="comment">#35</span></span><br></pre></td></tr></table></figure></h2><ol start="2"><li>方法2：构造器</li></ol><h2 id="￼1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d2 = dict([</span><br><span class="line">     [<span class="string">'name'</span>,<span class="string">'张三'</span>],</span><br><span class="line">     [<span class="string">'age'</span>,<span class="number">35</span>],</span><br><span class="line">     [<span class="string">'gender'</span>,<span class="string">'男'</span>]</span><br><span class="line"> ])</span><br></pre></td></tr></table></figure></h2><h2 id="字典的增删改查">字典的增删改查</h2><ul><li>例子：</li></ul><h2 id="￼2"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"张三"</span>,</span><br><span class="line">        <span class="string">"age"</span> : <span class="number">35</span>,</span><br><span class="line">         <span class="string">"gender"</span>: <span class="string">"男"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">d[<span class="string">'height'</span>] = <span class="number">185</span> <span class="comment">#增加身高为185</span></span><br><span class="line"><span class="keyword">del</span> d[<span class="string">'gender'</span>] <span class="comment">#删除性别</span></span><br><span class="line">d[<span class="string">'age'</span>] -= <span class="number">5</span><span class="comment"># 修改岁数减少5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#循环</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> d:</span><br><span class="line">    print(item)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#输出：</span></span><br><span class="line"><span class="comment">#name </span></span><br><span class="line"><span class="comment">#age</span></span><br><span class="line"><span class="comment">#gender</span></span><br><span class="line">            </span><br><span class="line">print(key + <span class="string">":"</span> + str(d[key]))</span><br></pre></td></tr></table></figure></h2><ol><li>要全部输出（key和value），可以进行序列的拼接。</li><li>因为35是数字（整型），所以要转换为字符串。</li></ol><h3 id="长度：">长度：</h3><h2 id="￼3"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"张三"</span>,</span><br><span class="line">        <span class="string">"age"</span> : <span class="number">35</span>,</span><br><span class="line">        <span class="string">"gender"</span>: <span class="string">"男"</span></span><br><span class="line">    &#125;</span><br><span class="line">print(len(d))</span><br><span class="line"><span class="comment">#输出：3</span></span><br></pre></td></tr></table></figure></h2><p>可以理解为3个东西，3个键值对。</p><h3 id="是否相等">是否相等</h3><ul><li>顺序对字典毫无意义</li><li>比较的是<code>key</code>，以及<code>key</code>后面的<code>value</code>是否相同。</li></ul><h3 id="in操作">in操作</h3><p>dict 的<code>in</code>操作,<u>检测的是key不是value</u>。</p><h2 id="字典的方法">字典的方法</h2><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">clear()</td><td style="text-align:center">清空字典</td></tr><tr><td style="text-align:center">keys()</td><td style="text-align:center">返回所有key</td></tr><tr><td style="text-align:center">values()</td><td style="text-align:center">返回所有value</td></tr><tr><td style="text-align:center">get(key)</td><td style="text-align:center">索引，类似于[]</td></tr><tr><td style="text-align:center">pop(key)</td><td style="text-align:center">删除，类似于上面的del</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">字典本质上是一个键值对，比如用户名-&gt;用户资料</summary>
    
    
    
    <category term="python" scheme="https://tanxy.club/categories/python/"/>
    
    
    <category term="python基础" scheme="https://tanxy.club/tags/python%E5%9F%BA%E7%A1%80/"/>
    
    <category term="字典" scheme="https://tanxy.club/tags/%E5%AD%97%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title>「python」- 列表</title>
    <link href="https://tanxy.club/ckici5lc4000bistv5ql95xrd/"/>
    <id>https://tanxy.club/ckici5lc4000bistv5ql95xrd/</id>
    <published>2019-06-22T01:32:25.000Z</published>
    <updated>2020-11-23T15:49:01.962Z</updated>
    
    <content type="html"><![CDATA[<h1>python 学习笔记之列表</h1><p>列表跟字符串很像，只不过存的不是字符，可以是任何东西（甚至是另一个list）。</p><h2 id="创建列表">创建列表</h2><ul><li>方法1:直接写。</li></ul><h2 id="￼0"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure></h2><ul><li>方法2：构造器。</li></ul><h2 id="￼1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l = list([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure></h2><ul><li>也可以通过其他序列构造列表</li></ul><h2 id="￼2"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l = list(<span class="string">'abcd'</span>)  <span class="comment">#l = ['a','b','c','d'] #把字符串转成列表</span></span><br></pre></td></tr></table></figure></h2><h2 id="访问列表元素">访问列表元素</h2><p>(和访问字符串元素一样)。</p><h2 id="￼3"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">print(l[<span class="number">0</span>])   <span class="comment">#1</span></span><br><span class="line">print(l[<span class="number">3</span>:<span class="number">5</span>])  <span class="comment">#3456</span></span><br></pre></td></tr></table></figure></h2><h2 id="序列通用操作">序列通用操作</h2><p>字符串和<code>list</code>都是序列，所以会有很多操作可以通用（当然，也有不可通用的部分）。</p><ul><li>例子</li></ul><h2 id="￼4"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]  <span class="comment">#判断是否存在</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">not</span> <span class="keyword">in</span> [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]+[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>] <span class="comment">#连接</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]*<span class="number">3</span>       <span class="comment">#重复</span></span><br><span class="line">l[<span class="number">0</span>]            <span class="comment">#索引</span></span><br><span class="line">len(l)          <span class="comment">#长度</span></span><br><span class="line">l(start:end)    <span class="comment">#截取</span></span><br><span class="line"><span class="keyword">for</span>             <span class="comment">#循环</span></span><br><span class="line">max和min        <span class="comment">#最大和最小值</span></span><br><span class="line">sum(l)          <span class="comment">#求和，str不可用</span></span><br></pre></td></tr></table></figure></h2><ul><li>例子：</li></ul><h2 id="￼5"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'asdfasdf'</span></span><br><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">print(len(s))  <span class="comment">#8</span></span><br><span class="line">print(len(l))  <span class="comment">#4</span></span><br></pre></td></tr></table></figure></h2><ul><li>例子：</li></ul><h2 id="￼6"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">12</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">99</span>]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> l:</span><br><span class="line">print(item)</span><br><span class="line"><span class="comment"># 12</span></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 8</span></span><br><span class="line"><span class="comment"># 99</span></span><br></pre></td></tr></table></figure></h2><ul><li>例子：</li></ul><h2 id="￼7"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">12</span>,<span class="number">8</span>,<span class="number">99</span>,<span class="number">27</span>]</span><br><span class="line">print(min(l))</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出：8</span></span><br><span class="line"></span><br><span class="line">l = [<span class="number">12</span>,<span class="number">8</span>,<span class="number">99</span>,<span class="number">27</span>,<span class="number">17</span>]</span><br><span class="line">print(sum[l])</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出：163</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">'jlkjdkl'</span></span><br><span class="line">print(sum(s))</span><br><span class="line"></span><br><span class="line"><span class="comment">#出错,字符串虽然是一个序列。因为每一元素是一个字，也是一个字符串，相加是不行的，本质上相加是数字去相加。</span></span><br></pre></td></tr></table></figure></h2><h2 id="比较运算">比较运算</h2><h2 id="￼8"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">12</span>,<span class="number">5</span>,<span class="number">9</span>]</span><br><span class="line">l2 = [<span class="number">8</span>,<span class="number">99</span>,<span class="number">99</span>]</span><br><span class="line"></span><br><span class="line">print(l1&gt;l2)</span><br><span class="line"><span class="comment">#True</span></span><br></pre></td></tr></table></figure></h2><h2 id="list-专有操作">list 专有操作</h2><h2 id="￼9"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">append(x)  <span class="comment">#末尾添加</span></span><br><span class="line">     l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">     l.append(<span class="number">5</span>) <span class="comment">#l = [1,2,3,5]</span></span><br><span class="line"></span><br><span class="line">insert(index,x) <span class="comment">#插入</span></span><br><span class="line">     l = insert(<span class="number">0</span>,<span class="number">5</span>)  <span class="comment">#l = [5,1,2,3]----在第0位插入5</span></span><br><span class="line"></span><br><span class="line">pop(i) <span class="comment">#删除，默认不带参数是删除最后一个</span></span><br><span class="line">     l.pop()     <span class="comment">#l = [1,2]</span></span><br><span class="line">     l.pop(<span class="number">0</span>)    <span class="comment">#l = [2,3]----带参数用，pop第几个--&gt;删除第几个</span></span><br><span class="line"></span><br><span class="line">remove(x)   <span class="comment">#删除，与pop的区别是，remove要你删除的是什么，不是第几个</span></span><br><span class="line">     l.remove(<span class="number">1</span>)  <span class="comment">#l = [2,3]----我要删除1，不是位置就是删除里面的内容</span></span><br><span class="line"></span><br><span class="line">count(x)   <span class="comment">#计数</span></span><br><span class="line">     l = [<span class="number">12</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">5</span>]</span><br><span class="line">     print(l.count(<span class="number">12</span>)) ----<span class="comment">#2   有多少个2</span></span><br><span class="line">     print(l.count(<span class="number">8</span>))------<span class="comment">#3   有多少个8</span></span><br><span class="line"></span><br><span class="line">index(x)  <span class="comment">#查找</span></span><br><span class="line">     l = [<span class="number">12</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">5</span>]</span><br><span class="line">     print(l.index(<span class="number">8</span>)) --<span class="comment">#2  ----8第一次出现是在第2位</span></span><br><span class="line">     print(l.index(<span class="number">99</span>))--<span class="comment">#出错---99没有出现在列表里面      </span></span><br><span class="line"></span><br><span class="line">reverse()  <span class="comment">#反转</span></span><br><span class="line">     l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">     l.reverse()</span><br><span class="line">     print(l)  <span class="comment">#----l = [4,3,2,1]</span></span><br><span class="line"></span><br><span class="line">     ps:不能直接print(l.reverse())---这样会返回none，因为reverse()不是直接返回值，是修改了值，所以要再次打印</span><br><span class="line"> </span><br><span class="line">sort()   <span class="comment">#排序</span></span><br><span class="line">     l = [<span class="number">12</span>,<span class="number">88</span>,<span class="number">9</span>,<span class="number">27</span>,<span class="number">6</span>]</span><br><span class="line">     l.sort()</span><br><span class="line">     print(l) ---<span class="comment"># l = [6,9,12,27,88]--默认从小到达排序</span></span><br><span class="line">     <span class="comment">#同理不能直接print(l.sort())</span></span><br></pre></td></tr></table></figure></h2><h2 id="推倒式">推倒式</h2><p>推倒式是python非常有特色的一个表达式，其他语言几乎没有。(本质上)从一个序列生成另一个序列。跟循环很像。</p><ul><li>语法：[结果 for x in 序列if 条件]</li><li>例子：</li></ul><h2 id="￼10"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="comment">#目标变成---&gt; l2 = [6,7,8,9]</span></span><br><span class="line"> </span><br><span class="line"> l2 = [item+<span class="number">5</span> <span class="keyword">for</span> item <span class="keyword">in</span> l]</span><br><span class="line"> print(l)</span><br><span class="line"> print(l2)</span><br><span class="line"> 输出；[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">       [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">     ps:l2 = [<span class="number">1</span> <span class="keyword">for</span> item <span class="keyword">in</span>  l]</span><br><span class="line">         输出：[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]----没有强制规定item一定要用</span><br><span class="line">     甚至全部变成<span class="string">'abc'</span> l2 = [<span class="string">'abc'</span> <span class="keyword">for</span> item <span class="keyword">in</span> l]</span><br><span class="line"> </span><br><span class="line"> l1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"> l2 = [item*<span class="number">2</span> <span class="keyword">for</span> item <span class="keyword">in</span> l1 <span class="keyword">if</span> item%<span class="number">3</span>==<span class="number">0</span>]</span><br><span class="line"> print(l2)</span><br><span class="line"> <span class="comment">#输出:[6,12,18]</span></span><br><span class="line"> <span class="comment">#将原本数列*2 之后得到的数列 能被3整除的</span></span><br></pre></td></tr></table></figure></h2><p>推倒式非常适合用来“导出”某个数据，比如：从一组xpath中导出标题。</p>]]></content>
    
    
    <summary type="html">列表（list）可以存任何东西，包括另一个list</summary>
    
    
    
    <category term="python" scheme="https://tanxy.club/categories/python/"/>
    
    
    <category term="python基础" scheme="https://tanxy.club/tags/python%E5%9F%BA%E7%A1%80/"/>
    
    <category term="列表" scheme="https://tanxy.club/tags/%E5%88%97%E8%A1%A8/"/>
    
    <category term="list" scheme="https://tanxy.club/tags/list/"/>
    
  </entry>
  
  <entry>
    <title>「python」- 字符串</title>
    <link href="https://tanxy.club/ckici5lds0032istvaalc14qd/"/>
    <id>https://tanxy.club/ckici5lds0032istvaalc14qd/</id>
    <published>2019-06-12T02:21:34.000Z</published>
    <updated>2020-11-23T15:49:30.626Z</updated>
    
    <content type="html"><![CDATA[<h1>python类型 - 字符串</h1><ol><li>python中的字符串就是一串字符</li><li>python中没有单独的字符类型(c和java有),<u>一个字符也是字符串、没有字符也是字符串</u></li><li>字符串很多操作和<code>list</code>、<code>tuple</code>是通用的，Python称之为<code>sequence（序列)</code></li></ol><h2 id="创建字符串">创建字符串</h2><ol><li>python中<u>单引号和双引号没有区别</u>。</li></ol><ul><li>例子：</li></ul><h2 id="￼0"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'abc'</span></span><br><span class="line">b = <span class="string">"abc"</span></span><br><span class="line"></span><br><span class="line">print(a == b)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出： True</span></span><br></pre></td></tr></table></figure></h2><ol start="2"><li>字符串是大小写敏感的，也就是<u><code>'Abc'</code>和<code>'abc'</code>是不同的</u></li><li>可以用str构造函数来创建字符串。</li></ol><ul><li>例子：</li></ul><h2 id="￼1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user1 = str() </span><br><span class="line"><span class="comment">#等价于user = '',等价于user = ""。</span></span><br></pre></td></tr></table></figure></h2><p>值得注意的是：python多次创建一个字符串，并不会创建多个副本（相对于Java、c++、js而言）。</p><h2 id="Python字符串都是静态字符串">Python字符串都是静态字符串</h2><p>无论用任何方式“创建”字符串，其实得到的是<u>同一个对象</u></p><ul><li>例子：</li></ul><h2 id="￼2"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#id(..)函数，可以获取对象在内存中的地址（也叫指针）</span></span><br><span class="line">a = <span class="string">'123'</span></span><br><span class="line">b = <span class="string">"123"</span></span><br><span class="line">c = str(<span class="string">'123'</span>)</span><br><span class="line">d = <span class="string">'1'</span>+<span class="string">'23'</span></span><br><span class="line">e = str(<span class="string">'1'</span>+<span class="string">'23'</span>)</span><br><span class="line"></span><br><span class="line">print(id(a))</span><br><span class="line">print(id(b))</span><br><span class="line">print(id(c))</span><br><span class="line">print(id(d))</span><br><span class="line">print(id(e))</span><br><span class="line"></span><br><span class="line"><span class="comment">#  1291309978928</span></span><br><span class="line"><span class="comment">#  1291309978928</span></span><br><span class="line"><span class="comment">#  1291309978928</span></span><br><span class="line"><span class="comment">#  1291309978928</span></span><br><span class="line"><span class="comment">#  1291309978928</span></span><br></pre></td></tr></table></figure></h2><p>只要字符串是相同的，无论用任何方法创造，创造出来都是一样的，不会创造副本。</p><h2 id="字符串运算符">字符串运算符</h2><ol><li>索引的作用：找字符串中某一位东西。</li></ol><blockquote><p>注：计算机中的序号，都是从0开始。</p></blockquote><ul><li>例子：</li></ul><h2 id="￼3"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">s1 = <span class="string">'abc'</span></span><br><span class="line">print(s1[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出 ：a</span></span><br></pre></td></tr></table></figure></h2><ol start="2"><li>连接<br>只有字符串可以连接。</li></ol><ul><li>例子：</li></ul><h2 id="￼4"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> a = <span class="string">'abc'</span></span><br><span class="line"> b = <span class="string">'ddd'</span></span><br><span class="line"></span><br><span class="line"> print(a+b)</span><br><span class="line"><span class="comment"># 输出： abcddd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!只需记住不能和不同类型一起加。</span></span><br><span class="line"><span class="comment">#print(12+'abc')会报错。</span></span><br></pre></td></tr></table></figure></h2><ol start="3"><li>重复<br>除了<code>+</code>和<code>*</code>，其他数学运算符对字符串不适用。</li></ol><ul><li>例子：</li></ul><h2 id="￼5"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'abc'</span>*<span class="number">5</span>)</span><br><span class="line"><span class="comment">#abcabcabcabcabc</span></span><br></pre></td></tr></table></figure></h2><h2 id="字符串截取">字符串截取</h2><p>可以截取字符串中的一部分。</p><p><strong>语法：str1[start:end]</strong></p><ul><li><p>用法1：<strong>起点、终点</strong></p></li><li><p>例子：</p></li></ul><h2 id="￼6"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">'abcdefg'</span></span><br><span class="line">print(s1[<span class="number">0</span>:<span class="number">3</span>])----取索引<span class="number">0</span><span class="number">-3</span>的内容</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出:abc------顾头不顾尾，不包含索引3的对象</span></span><br></pre></td></tr></table></figure></h2><ul><li>用法2：<strong>起点</strong></li><li>例子：</li></ul><h2 id="￼7"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">'abcdefg'</span></span><br><span class="line">print(s1[<span class="number">3</span>:]) </span><br><span class="line"><span class="comment">#取索引3到结尾的内容</span></span><br><span class="line"><span class="comment">#输出：defg</span></span><br></pre></td></tr></table></figure></h2><ul><li>用法3：<strong>终点</strong></li><li>例子：</li></ul><h2 id="￼8"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">'abcdefg'</span></span><br><span class="line">print(s1[:<span class="number">5</span>])</span><br><span class="line"><span class="comment">#取索引0-5的内容，顾头不顾尾</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#输出：abcde</span></span><br></pre></td></tr></table></figure></h2><ul><li>用法4： <strong>神经病版</strong></li><li>例子：</li></ul><h2 id="￼9"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">'abcdefg'</span></span><br><span class="line">print(s1[:])</span><br><span class="line"><span class="comment">#取字符串所有内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#输出：abcdefg</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串是静态的，所以用法4毫无意义，但对其他数据结构，却很有用。</span></span><br></pre></td></tr></table></figure></h2><h2 id="字符编码">字符编码</h2><p>任何字符在计算机中，都会表示为一个数字，这就是字符编码。由于历史原因，其实有很多种编码  。<br><u>ACSII编码<br>gb2312:简体中文<br>GBK:简体中文+繁体中文<br>shift_jis:日文</u><br>但是<strong>Unicode</strong>（统一编码)比较特殊，<u>囊括了人类所有语言、符号</u>，而且为未来的语言预留空间。</p><blockquote><p>注：<strong>utf-8是Unicode的一种实现</strong></p></blockquote><h2 id="操作编码">操作编码</h2><ul><li><strong>字符-&gt;编码–<code>ord()</code></strong></li></ul><h2 id="￼10"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ord(<span class="string">'a'</span>)  <span class="comment">#97</span></span><br><span class="line">ord(<span class="string">'智'</span>)  <span class="comment">#26234</span></span><br></pre></td></tr></table></figure></h2><ul><li><strong>编码-&gt;字符–<code>chr()</code></strong></li></ul><h2 id="￼11"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chr(<span class="number">97</span>)  <span class="comment">#'a'</span></span><br><span class="line">chr(<span class="number">26234</span>)  <span class="comment">#'智'</span></span><br></pre></td></tr></table></figure></h2><ul><li><strong><code>in</code> 和 <code>not in</code></strong></li></ul><blockquote><p>判断字符串有没有/是否存在某个东西</p></blockquote><h2 id="￼12"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    s1 = <span class="string">'hello world'</span></span><br><span class="line">    print(<span class="string">'h'</span><span class="keyword">in</span> s1)</span><br><span class="line">    print(<span class="string">'word'</span><span class="keyword">in</span> s1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出：</span></span><br><span class="line"><span class="comment">#True</span></span><br><span class="line"><span class="comment">#False</span></span><br></pre></td></tr></table></figure></h2><h2 id="字符串比较">字符串比较</h2><ol><li>这种比较本质上是比较其字符编码。</li><li>先比较第0个字符编码，如果相同就比较第二个，直到不同为止。</li></ol><h2 id="￼13"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'app'</span>&lt;<span class="string">'bear'</span>)</span><br><span class="line"><span class="comment">#输出 ：True</span></span><br><span class="line">print(<span class="string">'apple'</span>&gt;<span class="string">'apply'</span>)</span><br><span class="line"><span class="comment">#输出：False</span></span><br><span class="line">print(<span class="string">'Apple'</span> &gt; <span class="string">'apple'</span>)</span><br><span class="line"><span class="comment">#输出：False</span></span><br><span class="line">print(<span class="string">'abc'</span> &gt;<span class="string">''</span>)</span><br><span class="line"><span class="comment">#输出：True</span></span><br></pre></td></tr></table></figure></h2><p>空字符串本质上第一位字符编码是0。</p><h2 id="字符串循环">字符串循环</h2><h2 id="￼14"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">'Hello'</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> str1:</span><br><span class="line"><span class="comment">#s称之为循环变量，简单来说就是把字符串里面的每个字符以s来丢给你。</span></span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出：</span></span><br><span class="line"><span class="comment">#H</span></span><br><span class="line"><span class="comment">#e</span></span><br><span class="line"><span class="comment">#l</span></span><br><span class="line"><span class="comment">#1</span></span><br><span class="line"><span class="comment">#o</span></span><br><span class="line"><span class="comment">#当然也说过python字符串里面没有真正意义上的字符，所以上面打印出来：</span></span><br><span class="line"></span><br><span class="line">print(type(s))</span><br><span class="line"><span class="comment">#输出：&lt;class'str'&gt;还是个字符串</span></span><br></pre></td></tr></table></figure></h2><h2 id="字符串检测">字符串检测</h2><table><thead><tr><th style="text-align:center">检测方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">isalnum()</td><td style="text-align:center">是否为字母或数字</td></tr><tr><td style="text-align:center">isalpha()</td><td style="text-align:center">是否为字母</td></tr><tr><td style="text-align:center">isdigit()</td><td style="text-align:center">是否为数字</td></tr><tr><td style="text-align:center">isidentifier()</td><td style="text-align:center">是否是合法标识符</td></tr><tr><td style="text-align:center">islower()</td><td style="text-align:center">是否为全小写</td></tr><tr><td style="text-align:center">isupper()</td><td style="text-align:center">是否为全大写</td></tr><tr><td style="text-align:center">isspace()</td><td style="text-align:center">是否为全标识符</td></tr></tbody></table><ul><li>用法举例：</li></ul><h2 id="￼15"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'aaa'</span>.isdigit()    <span class="comment">#False</span></span><br><span class="line"><span class="string">'aaa'</span>.isappha()    <span class="comment">#True</span></span><br></pre></td></tr></table></figure></h2><h2 id="字符串搜索">字符串搜索</h2><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">find()</td><td style="text-align:center">从左边找，找到返回下标，没找到返回-1</td></tr><tr><td style="text-align:center">rfind()</td><td style="text-align:center">从右边找，找到返回下标，没找到返回-1</td></tr><tr><td style="text-align:center">count(str)</td><td style="text-align:center">计数</td></tr><tr><td style="text-align:center">startswith(str)</td><td style="text-align:center">是否以str开头</td></tr><tr><td style="text-align:center">endswtih(str)</td><td style="text-align:center">是否以str结尾</td></tr></tbody></table><ul><li>用法举例：</li></ul><h2 id="￼16"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">s1 = <span class="string">'abcddef'</span></span><br><span class="line">print(s1.find(<span class="string">'d'</span>))</span><br><span class="line">print(s1.find(<span class="string">'w'</span>))</span><br><span class="line"><span class="comment">#输出：3，只会查找从左开始找的第一个。</span></span><br><span class="line"><span class="comment">#输出：-1</span></span><br><span class="line"></span><br><span class="line">print(s1.count(<span class="string">'dd'</span>))</span><br><span class="line"><span class="comment">#输出：1，出现了一次。</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.baidu.com'</span></span><br><span class="line">print(url.startswith(<span class="string">'http://'</span>))</span><br><span class="line"><span class="comment">#判断url是否为一个网址，实际用途可以为判断用户输入是否正确。</span></span><br></pre></td></tr></table></figure></h2><p>#字符串转换</p><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">upper()</td><td style="text-align:center">转为大写</td></tr><tr><td style="text-align:center">lower()</td><td style="text-align:center">转为小写</td></tr><tr><td style="text-align:center">swapcase()</td><td style="text-align:center">反转大小写</td></tr><tr><td style="text-align:center">capitalize()</td><td style="text-align:center">首字母大写</td></tr><tr><td style="text-align:center">title()</td><td style="text-align:center">每个单词首字母大写</td></tr><tr><td style="text-align:center">replace(old,new)</td><td style="text-align:center">替换</td></tr></tbody></table><ul><li>用法举例:</li></ul><h2 id="￼17"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'aBeDf'</span>.lower()    <span class="comment">#abedf </span></span><br><span class="line"><span class="comment">#!!最常用replace(old,new)，抓取数据有用</span></span><br><span class="line"><span class="string">'hello world,i am came'</span>.replace(<span class="string">'a'</span>,<span class="string">'A'</span>)</span><br><span class="line"><span class="comment">#'hello world,i Am cAme'</span></span><br></pre></td></tr></table></figure></h2>]]></content>
    
    
    <summary type="html">python中没有所谓的字符类型，一个字符也是字符串，没有字符也是字符串（空字符串）</summary>
    
    
    
    <category term="python" scheme="https://tanxy.club/categories/python/"/>
    
    
    <category term="python基础" scheme="https://tanxy.club/tags/python%E5%9F%BA%E7%A1%80/"/>
    
    <category term="字符串" scheme="https://tanxy.club/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>「python」- 数字</title>
    <link href="https://tanxy.club/ckici5lca000jistv37bv7wo6/"/>
    <id>https://tanxy.club/ckici5lca000jistv37bv7wo6/</id>
    <published>2019-06-06T06:24:25.000Z</published>
    <updated>2020-11-23T15:49:25.797Z</updated>
    
    <content type="html"><![CDATA[<h1>python中的数字</h1><ul><li>int 整数：23</li><li>float 浮点数、小数：15.8</li><li>complex 复数，：-1根号</li></ul><h2 id="三种类型：">三种类型：</h2><ol><li>整数：所有的整数都属于int类</li></ol><h2 id="￼0"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">12</span></span><br><span class="line">print(type(a))</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出 &lt;class 'int'&gt;</span></span><br></pre></td></tr></table></figure></h2><h3 id="python3里面没有long，也用不着long">python3里面没有long，也用不着long</h3><h2 id="￼1"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//c语言中</span></span><br><span class="line"><span class="keyword">int</span> a <span class="comment">//32位整数</span></span><br><span class="line"><span class="keyword">long</span> b <span class="comment">//64位整数</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> c <span class="number">128</span>位整数</span><br></pre></td></tr></table></figure></h2><h2 id="￼2"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python的整数可以非常大</span></span><br><span class="line">a = <span class="number">999999999999999999999999999999</span></span><br><span class="line">print(a)</span><br><span class="line">输出：<span class="number">999999999999999999999999999999</span></span><br></pre></td></tr></table></figure></h2><ol start="2"><li>浮点数：所有浮点数都属于float类</li></ol><h2 id="￼3"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">12.5</span></span><br><span class="line">print(type(a))</span><br><span class="line"><span class="comment">#输出&lt;class'float'&gt;</span></span><br><span class="line"><span class="comment">#python中没有double，也用不着double。</span></span><br></pre></td></tr></table></figure></h2><ol start="3"><li>复数：复数都是complex类</li></ol><h2 id="￼4"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">15</span>+<span class="number">3j</span></span><br><span class="line">b = <span class="number">8</span><span class="number">-2j</span></span><br><span class="line"></span><br><span class="line">print(a+b)</span><br></pre></td></tr></table></figure></h2><h2 id="类型检测">类型检测</h2><h2 id="￼5"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#type(x)可以用来检测类型</span></span><br><span class="line">type(<span class="number">120</span>)  <span class="comment">#int</span></span><br><span class="line">type(<span class="number">5.0</span>)  <span class="comment">#float</span></span><br><span class="line">type(<span class="number">12</span>+<span class="number">0j</span>) <span class="comment">#complex</span></span><br></pre></td></tr></table></figure></h2><h2 id="Python运算符">Python运算符</h2><p>基本运算符（±*/）和其他语言都一样，但也有些不一样的。</p><h2 id="￼6"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#正常除法</span></span><br><span class="line"><span class="number">16</span>/<span class="number">5</span>   <span class="comment">#3.2</span></span><br><span class="line"><span class="number">16</span>%<span class="number">5</span>   <span class="comment">#1--余数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#整除</span></span><br><span class="line"><span class="number">16</span>//<span class="number">5</span>  <span class="comment">#3</span></span><br></pre></td></tr></table></figure></h2><h2 id="幂操作">幂操作</h2><h2 id="￼7"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">3</span>**<span class="number">100</span>)  <span class="comment">#两个*代表多少次方</span></span><br><span class="line"><span class="comment">#转个思路</span></span><br><span class="line">print(<span class="number">9</span>**<span class="number">0.5</span>)   <span class="comment">#9的二分之一次方就是开根号</span></span><br></pre></td></tr></table></figure></h2><h2 id="扩展赋值">扩展赋值</h2><h2 id="￼8"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">15</span></span><br><span class="line">a = a + <span class="number">5</span> <span class="comment">#等价于 a += 5</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="comment">#输出： 20</span></span><br></pre></td></tr></table></figure></h2><h2 id="python没有-操作">python没有<code>++</code> <code>--</code> 操作</h2><p><code>i++</code>  ==&gt;  <code>i+=1 </code>i–<code> ==&gt; </code>i-=1`</p><p>python没有自增、自减操作，也不需要</p><h2 id="运算符优先级">运算符优先级</h2><h2 id="￼9"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span>+<span class="number">6</span>/<span class="number">2</span>  <span class="comment">#15</span></span><br><span class="line">(<span class="number">12</span>+<span class="number">6</span>)/<span class="number">2</span>  <span class="comment">#9</span></span><br></pre></td></tr></table></figure></h2><h2 id="优先级表：">优先级表：</h2><p><u>括号 &gt; 函数 &gt; 列表/属性 &gt; 数值运算 &gt; 逻辑运算 &gt; 赋值</u></p>]]></content>
    
    
    <summary type="html">三种类型：整数、浮点数、复数</summary>
    
    
    
    <category term="python" scheme="https://tanxy.club/categories/python/"/>
    
    
    <category term="python基础" scheme="https://tanxy.club/tags/python%E5%9F%BA%E7%A1%80/"/>
    
    <category term="数字" scheme="https://tanxy.club/tags/%E6%95%B0%E5%AD%97/"/>
    
  </entry>
  
  <entry>
    <title>「python」- 数据类型和变量</title>
    <link href="https://tanxy.club/ckici5lc10008istvfax9gypd/"/>
    <id>https://tanxy.club/ckici5lc10008istvfax9gypd/</id>
    <published>2019-06-04T05:45:21.000Z</published>
    <updated>2020-11-23T15:50:03.552Z</updated>
    
    <content type="html"><![CDATA[<h1>Python入门 - 数据类型和变量</h1><p>变量是用来存东西的。就像一个杯子用来装水,但是Python里面存的不是水，而存的是在哪能找到这个水，存的是引用，即变量用于引用内存中存储的对象。</p><h2 id="python中的一切都是“对象”（Object）">python中的一切都是“对象”（Object）</h2><p>基本类型也是对象。</p><h2 id="Python是动态类型的">Python是动态类型的</h2><p>一个变量的类型可以变，可以存数字，过一会可以存字符串。</p><h2 id="￼0"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">12</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">a = <span class="string">'abc'</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出：</span></span><br><span class="line"><span class="comment">#12</span></span><br><span class="line"><span class="comment">#abc</span></span><br></pre></td></tr></table></figure></h2><h2 id="Python的变量无需声明">Python的变量无需声明</h2><p>在第一次赋值的时候产生。</p><h2 id="￼1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java中：</span></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">a = <span class="number">12</span>;</span><br></pre></td></tr></table></figure></h2><h2 id="￼2"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python中：</span></span><br><span class="line">a = <span class="number">12</span>   <span class="comment"># 即可</span></span><br></pre></td></tr></table></figure></h2><h3 id="python是强类型的">python是强类型的</h3><p>不能随便把一个数字和字符串放到一块去。</p><h2 id="￼3"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#连等</span></span><br><span class="line">a = b = c = <span class="number">12</span></span><br><span class="line"><span class="comment">#等价于</span></span><br><span class="line">a = <span class="number">12</span></span><br><span class="line">b = <span class="number">12</span></span><br><span class="line">c = <span class="number">12</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#再次说明：在python中，a并不保存值本身，而是引用这个值</span></span><br></pre></td></tr></table></figure></h2><p>其他语言比如c语言，你让他保存12到一个变量a里面，这个变量里面是真的存了这个12的值。</p><h2 id="解构赋值（联合赋值）">解构赋值（联合赋值）</h2><h2 id="￼4"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a,b,c = <span class="number">12</span>,<span class="number">5</span>,<span class="number">8</span></span><br></pre></td></tr></table></figure></h2><p>说白了，就是可以同时给很多个变量赋值。可以做一些好玩的事情：</p><h2 id="￼5"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">12</span></span><br><span class="line">b = <span class="number">5</span></span><br><span class="line">print(a,b)</span><br><span class="line"></span><br><span class="line">b,a = a,b</span><br><span class="line">print(a,b)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出：</span></span><br><span class="line"><span class="comment">#12 5</span></span><br><span class="line"><span class="comment">#5 12</span></span><br></pre></td></tr></table></figure></h2><h2 id="Python基本数据类型">Python基本数据类型</h2><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">表示</th></tr></thead><tbody><tr><td style="text-align:center">数字</td><td style="text-align:center">int，float</td></tr><tr><td style="text-align:center">字符串</td><td style="text-align:center">str</td></tr><tr><td style="text-align:center">列表</td><td style="text-align:center">list</td></tr><tr><td style="text-align:center">元组</td><td style="text-align:center">tuple</td></tr><tr><td style="text-align:center">字典</td><td style="text-align:center">dict</td></tr><tr><td style="text-align:center">布尔值</td><td style="text-align:center">bool</td></tr></tbody></table><h2 id="￼6"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#接收用户输入</span></span><br><span class="line">（python是强类型的）</span><br><span class="line"></span><br><span class="line">name = input(<span class="string">'请输入你的名字：'</span>)</span><br><span class="line">print(<span class="string">'你好'</span>，+name)</span><br><span class="line"></span><br><span class="line">输出：请输入你的名字：张三（这个张三是用户输入进去的）</span><br><span class="line">      你好，张三</span><br><span class="line">  </span><br><span class="line"><span class="comment">#注：</span></span><br><span class="line">age = input(<span class="string">'你今年几岁'</span>)</span><br><span class="line">year = <span class="number">2018</span>-int(age)   </span><br><span class="line"><span class="comment">#加int转换类型是因为input所输入进来的一切都是字符串，所以要转换为int</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'你是'</span>+str(year)+<span class="string">'出生的'</span>)</span><br><span class="line"><span class="comment">#加str是因为year被上面转换成数字，这里'你是'是字符串，所以需要再转换</span></span><br></pre></td></tr></table></figure></h2>]]></content>
    
    
    <summary type="html">python入门必了解的数据类型与变量</summary>
    
    
    
    <category term="python" scheme="https://tanxy.club/categories/python/"/>
    
    
    <category term="数据类型" scheme="https://tanxy.club/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
    <category term="变量" scheme="https://tanxy.club/tags/%E5%8F%98%E9%87%8F/"/>
    
    <category term="python基础" scheme="https://tanxy.club/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>标题</title>
    <link href="https://tanxy.club/ckici5lbk0000istv2mds3w5g/"/>
    <id>https://tanxy.club/ckici5lbk0000istv2mds3w5g/</id>
    <published>2018-06-04T14:01:00.000Z</published>
    <updated>2020-11-20T12:30:19.294Z</updated>
    
    <content type="html"><![CDATA[<p>这条应该是简介吧</p><a id="more"></a><h2 id="Daily">Daily</h2><p>这个主题确实不错</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这条应该是简介吧&lt;/p&gt;</summary>
    
    
    
    
    <category term="博客" scheme="https://tanxy.club/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="Start" scheme="https://tanxy.club/tags/Start/"/>
    
  </entry>
  
</feed>
